{
    "identity": "pex-807",
    "title": "<p>Build a Bioinformatic Analysis Platform and Apply it to Routine Analysis of Microbial Genomics and Comparative Genomics</p>",
    "content": [
        {
            "header": "Introduction",
            "content": "<p>Genome sequencing has become a routine method for common microbiological studies owing to the steady decrease in the cost of genome sequencing. Various tools have been developed for genome analysis. However, for general users, it takes time to install and learn to use various programs and prepare the related input files. Even for some simple objectives, users need to spend much effort to integrate several tools or even write scripts. For example, when we need a core-genome-SNP-based phylogenetic analysis for isolates from the same species, we should successively use the following tools, Bowtie2<sup>1</sup> or BWA<sup>2</sup> for read mapping, Samtools<sup>3</sup> or GATK<sup>4</sup> for SNP calling, and FastTree<sup>5</sup> or RAxML<sup>6</sup> for phylogenetic tree construction. Therefore, a comprehensive, flexible, and efficient pipeline for general analysis is urgently needed. We developed a prokaryotic genomic and comparative genomic analysis pipeline named PGCGAP to coordinate several genomic analysis software packages and in-house scripts to meet the various needs of microbiologists.</p><p><strong>Development of the protocol</strong></p><p>PGCGAP was developed to facilitate the work of genomic and comparative genomic analyses of microbes. Considering the important role of basic bioinformatics in microbial research and that most microbiologists lack bioinformatic analysis skills, this protocol describes in detail the installation of Linux systems and demonstrates software installation methods. Finally, we demonstrated systematically all the applications of PGCGAP using the example datasets.</p><p><strong>Applications of the protocol</strong></p><p>PGCGAP can be used for (i) reads preprocess and genome assembly, (ii) gene prediction and annotation, (iii) genome and metagenome distance estimation, (iv) phylogenetic analysis, (v) COG annotation, (vi) pan-genome analysis, (vii) inference of orthologous gene groups, (viii) variant calling and annotation, and (ix) screening for antimicrobial and virulence genes. Noteworthy, although the entire pipeline was developed for prokaryotes, some modules, such as \u201cAssemble\u201d, \u201cMASH\u201d, \u201cOrthoF\u201d, \u201cCoreTree\u201d, \u201cAntiRes\u201d, and \u201cSTREE\u201d, can also be used for the analysis of eukaryotic genomes. Moreover, the \u201cVAR\u201d module can be applied for the analysis of any haploid genome.</p><p><strong>Advantages and limitations of this pipeline</strong></p><p>PGCGAP is versatile, feature-rich, easy to install and use, and friendly to microbiologists and bioinformatics beginners. New features will continue to be added. However, a graphical user interface (GUI) has not been developed.</p><p><strong>Expertise required to implement the protocol</strong></p><p>Users need to be skilled in using computers, and it will be easier to master this protocol if they have some Linux skills. A webpage introducing the basics of Linux, usage of common commands, software installation, and whole-genome sequencing technology was developed to help users get started with bioinformatics. Please visit <a href=\"https://github.com/liaochenlanruo/pgcgap/wiki/Learning-bioinformatics\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/liaochenlanruo/pgcgap/wiki/Learning-bioinformatics</a> or <a href=\"http://bcam.hzau.edu.cn/linuxwgs.php\" rel=\"noopener noreferrer\" target=\"_blank\">http://bcam.hzau.edu.cn/linuxwgs.php</a> for more information.</p><p><strong>Overview of the procedure</strong></p><p>Twelve frequently used prokaryotic genomic and comparative genomic analysis processes were integrated into PGCGAP as different modules. Modules can be used separately or in different combinations for various purposes (Fig. 1). (i) \u201cAssemble\u201d performs genome assembly of Illumina reads, third-generation reads, and hybrid reads using ABySS<sup>7</sup>, SPAdes<sup>8</sup>, Canu<sup>9</sup>, and Unicycler<sup>10</sup>. The paired-end reads will be preprocessed with Fastp<sup>11</sup> to remove adapters, polyG tail, and low-quality reads before genome assembly. (ii) \u201cAnnotate\u201d performs gene prediction and genome annotation by Prokka<sup>12</sup>. (iii) \u201cANI\u201d computes Average Nucleotide Identity (ANI) between each genome pair by fastANI<sup>13</sup>. Three scripts \u201ctriangle2list.pl\u201d, \u201cget_ANImatrix.pl\u201d, and \u201cPlot_ANIheatmap.R\u201d have been developed here to generate the ANI matrix and plot the correlation matrix heat map (Supplementary Figure S1). (iv) \u201cMASH\u201d estimates genome and metagenome distance and similarity using MinHash<sup>14</sup>, and a heat map of genome similarity will be generated by two scripts \u201cget_Mash_Matrix.pl\u201d and \u201cPlot_MashHeatmap.R\u201d (Supplementary Figure S2). (v) \u201cPan\u201d calls Roary<sup>15</sup> to calculate the pan-genome. Two scripts \u201cfmplot.py\u201d and \u201cplot_3Dpie.R\u201d were developed for result visualization (Supplementary Figure S3). A phylogenetic tree based on single-copy core proteins called by Roary<sup>17</sup> will be constructed (Supplementary Figure S4). (vi) COG (Clusters of Orthologous Group) annotation can be conducted using the module \u201cpCOG\u201d. Amino acid sequences of each genome are blasted against the COG database, and then all hits will be mapped to the COG functional category by in-house scripts. The R script \u201cPlot_COG.R\u201d was written for result visualization (Supplementary Figure S5). Comparison and visualization of COG functional categories among different genomes can be done by Perl script \u201cget_flag_relative_abundances_table.pl\u201d and R script \u201cPlot_COG_Abundance.R\u201d (Supplementary Figure S6). (vii) \u201cOrthoF\u201d uses OrthoFinder<sup>16</sup> for phylogenetic orthology inference. Gene duplication events are also predicted (Supplementary Figure S7). (viii) \u201cCoreTree\u201d was developed for genome-wide phylogenetic analysis based on the protein sequences or SNPs of single-copy core genes. First, CD-HIT<sup>17</sup> is used to rapidly generate protein clusters, and then the protein sequences of single-copy core genes are extracted by Perl scripts and aligned using MAFFT<sup>18</sup>. Second, on the one hand, alignments of protein sequences are concatenated, and the phylogenetic tree with best model is constructed by ModelTest-NG<sup>19</sup> and RAxML-NG<sup>20</sup> (Supplementary Figure S8). Contrarily, the protein sequence alignments are converted into corresponding codon alignments using PAL2NAL v14<sup>21</sup>. Then, the codon alignments are concatenated, and SNP-sites<sup>22</sup> are called to find the SNP sites. Finally, ModelTest-NG<sup>19</sup> and RAxML-NG<sup>20</sup> can be used to construct the SNP phylogenetic tree (Supplementary Figure S9). (ix) \u201cAntiRes\u201d calls abricate<sup>23</sup> to screen for antimicrobial and virulence genes from contigs. (x) \u201cVAR\u201d performs genome-wide variants calling by mapping methods. First, single-end or paired-end reads are mapped to a reference genome by BWA<sup>2</sup> after filtering by Sickle<sup>24</sup>. Second, variant calling and annotation are performed by Freebayes<sup>25</sup> and snpEff<sup>26</sup>, respectively. Then, the whole-genome SNP alignment and core SNP alignment are obtained using a snippy-core<sup>27</sup>. Finally, Gubbins<sup>28</sup> is used to remove SNPs influenced by recombination events of the whole genome SNP alignment and to construct a phylogenetic tree (Supplementary Figure S10). Furthermore, the phylogenetic tree of core SNP alignment can be constructed using ModelTest-NG<sup>19</sup> and RAxML-NG<sup>20</sup> (Supplementary Figure S11). (xi) \u201cSTREE\u201d constructs a phylogenetic tree based on multiple FASTA sequences in one file. First, the sequences are aligned by MUSCLE<sup>29</sup>, and then Gblocks<sup>30</sup> is used to obtain the conserved blocks of aligned sequences. Finally, IQ-TREE<sup>31</sup> is used for phylogenomic inference (Supplementary Figure S12). (xii) \u201cACC\u201d integrates other useful gadgets and now includes the function \u201cAssess\u201d for filtering short sequences in the genome and assessing the status of the genome only.</p><p><strong>Experimental design</strong></p><p><strong>Selection of reference genome format for variants calling</strong></p><p>The reference genome can be files in FASTA and GenBank formats. If a GenBank file rather than a FASTA file was supplied as the reference, annotation information of the variants was generated to show the user whose features were affected by the variants.</p><p><strong>How to balance speed and assembly quality when assembling Illumina reads</strong></p><p>From our experience, ABySS<sup>7</sup> can complete genome assembly faster and with fewer computer resources. The assembly qualities of Unicycler<sup>10</sup> and SPAdes<sup>8</sup> are better than ABySS<sup>7</sup>, occupy more computer resources and run very slowly. Therefore, we strongly recommend that users choose the auto mode for Illumina data assembly. PGCGAP first calls ABySS<sup>7</sup> for Illumina read assembly. When the N50 of the assembled genome is less than 50,000, it automatically calls Unicycler<sup>10</sup> and SPAdes<sup>8</sup> to try multiple parameters for another assembly.</p><p><strong>Choice of a module to construct the phylogenetic tree of single-copy core proteins</strong></p><p>Both \u201cCoreTree\u201d and \u201cPan\u201d can be used to construct a phylogenetic tree of single-copy core proteins. The module that should be used depends on which type of input file the user possesses. \u201cCoreTree\u201d takes only the amino acid sequence files as inputs, while \u201cPan\u201d needs both amino acid sequence files and Gff3 files. In addition, according to the default threshold, the number of single-copy core proteins obtained by \u201cCoreTree\u201d and \u201cPan\u201d may be different. Users can choose a module that generates more single-copy core proteins to build the phylogenetic tree.</p><p><strong>Choice of a module to calculate pairwise genome distance</strong></p><p>Both \u201cANI\u201d and \u201cMASH\u201d can calculate the pairwise genome distance. \u201cMASH\u201d is more suitable for dealing with thousands of genomes as it runs faster. In addition to nucleotide sequences and assembled genomes, \u201cMASH\u201d can also take amino acid sequences and raw sequencing reads as inputs, and can be used to calculate distances between metagenomic samples.&nbsp;It is worth noting that no ANI output will be reported if the ANI value is below 78 %, and in this case, MASH can be used instead.</p>"
        },
        {
            "header": "Reagents",
            "content": "<p>No reagents are required for this protocol. But example datasets were needed to practice the application of PGCGAP. The example datasets used in this protocol can be downloaded at&nbsp;<a href=\"http://bcam.hzau.edu.cn/PGCGAP/PGCGAP_Examples.tar.gz\" rel=\"noopener noreferrer\" target=\"_blank\">http://bcam.hzau.edu.cn/PGCGAP/PGCGAP_Examples.tar.gz</a>.</p>"
        },
        {
            "header": "Equipment",
            "content": "<p>A laptop, desktop PC, or server can be used to build a bioinformatic analysis platform, and the suggested hardware requirements are listed in Table 1. Slightly lower features are also allowed (CPU must have four logical processors, memory must be greater than 8 G), but the computing speed may decrease, and the capacity of the hard disk can be adjusted according to actual requirements.</p><p>&nbsp;</p>"
        },
        {
            "header": "Procedure",
            "content": "Building a bioinformatic analysis platform on Windows 10\nThe Windows Subsystem for Linux (WSL) allows users to install Linux subsystems directly on a Windows 10 system. It can easily run Linux commands and install Linux software to avoid the installation of third-party virtual machine software. The advantage of WSL is that it makes better use of computer memory and does not require copying files between the host and the virtual machine.\nConfiguration of WSL\nTiming ~1 min\nSystem requirements: Windows 10 Version 1709, Build 16299, or above 64-bit systems.\n1.\u00a0Enable WSL: Open \u201cSettings\u201d, click \u201cApps\u201d, then find and click \u201cPrograms and Features\u201d, click \u201cTurn Windows features on or off\u201d, find \u201cWindows Subsystem for Linux\u201d and check the box, click \u201cOK\u201d, and restart the computer (Supplementary Video 1).\nInstall Linux\nTiming ~59 min\n2.\u00a0Open the Microsoft Store, search Ubuntu, and choose to install Ubuntu 18.04 LTS. Follow the prompts to set up your username and password. Here, we create an account with the username \u201cbio\u201d (Supplementary Video 2). When the installation is finished, we need to do some configuration on the system (Supplementary Video 3).\n3.\u00a0Enter the following command in the terminal to update the source:\n$sudo apt-get update\n4.\u00a0Set the password for root.\n$sudo passwd root\n5.\u00a0Enable the CUDA-aware MPI.\nFor Linux 64, the CUDA awareness support may be disabled by default. Users should enable the support by setting the environment variable to use OpenMPI. Check whether CUDA awareness support is enabled in the environment variable configuration file (~/.bashrc). If it is not enabled, enter the following commands in the terminal.\n$echo OMPI_MCA_opal_cuda_support=true >> ~/.bashrc\n$source ~/.bashrc\n6.\u00a0Installation of Miniconda\n(A)\u00a0\u00a0Installation of Miniconda on Linux\n(i)\u00a0Here,\nMiniconda\nwill be installed; go to the\nofficial website\n, and select the installation file suitable for your system and Python version (Supplementary Video 4).\n$wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n(ii)\u00a0Start installation\n$bash Miniconda3-latest-Linux-x86_64.sh\nKeep pressing \u201cEnter\u201d key when prompted to visualize the license agreement, enter \u201cyes\u201d and press \u201cEnter\u201d to continue. Press \u201cEnter\u201d to confirm the default installation location. Miniconda is installed in the miniconda3 directory, under the user\u2019s home directory. Type \u201cyes\u201d and press \u201cEnter\u201d to initialize miniconda3. Finally, type the command \u201csource ~/.bashrc\u201d in the terminal.\n$source ~/.bashrc\n(iii)\u00a0Set up the Bioconda channel. Add the channels by entering the following three commands in the terminal.\n$conda config --add channels defaults\n$conda config --add channels bioconda\n$conda config --add channels conda-forge\n(B)\u00a0\u00a0Install Miniconda on MacOS\n(i)\u00a0Installation of Miniconda3\n$wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\n$sh Miniconda3-latest-MacOSX-x86_64.sh\n$source ~/.bash_profile\n(ii)\u00a0Add channels of Bioconda\n$conda config --add channels defaults\n$conda config --add channels bioconda\n$conda config --add channels conda-forge\nInstallation of PGCGAP (Supplementary Video 5).\nTiming ~34 min\n7.\u00a0Create a pgcgap environment for the installation of PGCGAP.\n$conda create -n pgcgap python=3\n8.\u00a0Activate the pgcgap environment.\n$conda activate pgcgap\n9.\u00a0Installation of PGCGAP.\n$conda install pgcgap\n10. Check if the dependent software packages were installed.\n$pgcgap --check-external-programs\n11.\u00a0Set up the COG database.\n$pgcgap --setup-COGdb\n12.\u00a0Exit the pgcgap environment.\n$conda deactivate\nStep by Step examples\nTiming ~2.3 d\nThe usage and parameters of PGCGAP can be viewed by typing \u201cpgcgap -h\u201d in the terminal. Next, we show how to run all the modules of the PGCGAP through a dataset.\n13.\u00a0Download and decompress the example dataset.\n$wget http://bcam.hzau.edu.cn/PGCGAP/PGCGAP_Examples.tar.gz\n$tar -zxvf PGCGAP_Examples.tar.gz\nIn this example, the working directory is located at the H drive. All hard disks in Windows were mounted in the \u201c/mnt\u201d directory of Ubuntu Linux. The \u201cPGCGAP_Examples/Reads/Illumia\u201d directory contains six Illumina Hiseq paired-end reads\nof\nEscherichia coli\n; the \u201cPGCGAP_Examples/Reads/Oxford\u201d directory contains the Oxford Nanopore reads of\nEscherichia coli\nK12; and the \u201cPGCGAP_Examples/Reads/PacBio\u201d directory contains the Pacific Biosciences released P6-C4 chemistry reads of\nEscherichia coli\nK12. \u201cPGCGAP_Examples/Reads/MG1655.gbff\u201d is the GenBank format file of\nE. coli\nK-12\nsubstr\n. MG1655, and will be used as the reference genome. The \u201cPGCGAP_Examples/Reads/Hybrid\u201d directory contains two short reads files and one long reads file of the same strain. \u201cPGCGAP_Examples/Other_inputs/ proteins.fas\u201d contains 18 protein sequences of MFS transporter from several bacterial species.\n14.\u00a0Activate the pgcgap environment.\n$conda activate pgcgap\n15.\u00a0Example 1: Genome assembly with Illumina reads.\nPaired-end reads of six strains in the directory \u201cReads/Illumina/\u201d are used as inputs. In the dataset, the naming format of the genome is \u201cstrain_1.fastq.gz, \u201d and \u201cstrain_2.fastq.gz\u201d. The string after the strain name is \u201c_1.fastq.gz\u201d, and its length is 11, so \u201c--suffix_len\u201d was set to 11. Users can choose \u201cabyss\u201d, \u201cspades\u201d, and \u201cauto\u201d for genome assembly. The assembly speed with \u201cabyss\u201d is faster, and the assembly quality with \u201cspades\u201d is better. Taking into account the speed and quality of assembly, we suggest using the \u201cauto\u201d mode for assembly. \u201c--filter_length\u201d is set here to remove sequences shorter than 200 bp from the assembled genomes.\n$pgcgap --Assemble --platform illumina --assembler abyss --filter_length 200 --ReadsPath Reads/Illumina --reads1 _1.fastq.gz --reads2 _2.fastq.gz --kmmer 81 --threads 4 --suffix_len 11\n$pgcgap --Assemble --platform illumina --assembler spades --filter_length 200 --ReadsPath Reads/Illumina --reads1 _1.fastq.gz --reads2 _2.fastq.gz --threads 4 --suffix_len 11\n$pgcgap --Assemble --platform illumina --assembler auto --filter_length 200 --ReadsPath Reads/Illumina --reads1 _1.fastq.gz --reads2 _2.fastq.gz --kmmer 81 --threads 4 --suffix_len 11\nNew directories and documents are generated after the program is completed. The assembly results for each genome are in the \u201cResults/Assembles/Illumina\u201d directory, while all scaffolds of the strains are stored in \u201cResults/Assembles/Scaf/Illumina\u201d. \u201c*.filtered.fas\u201d is the genome with short sequences removed. \u201c*.prefilter.stats\u201d describes the status of the genome before filtering, and \u201c*.filtered.stats\u201d describes the status of the genome after short sequence filtering. While \u201cabyss\u201d was chosen as the assembler, users are advised to check the assembly stats file (such as Results/Assembles/Illumina/SRR9620252_assembly/SRR9620252-stats.tab) of each genome to ensure that the value of N50 is greater than 50,000 bp. The file \u201cscaf.list\u201d under the working directory contains the absolute path of all genomes.\n16.\u00a0Example 2: Oxford reads assembly.\nThe Oxford nanopore produces only one read file (\u201cReads/Oxford/oxford.fasta\u201d), so only the parameter of \u201c--reads1\u201d needs to be set. Here, the value \u201c.fasta\u201d. \u201c--genomeSize\u201d is the estimated genome size, and users can check the genome size of similar strains in the NCBI database for reference. The parameter is set to \u201c4.8m\u201d. The suffix of the reads file here is \u201c.fasta\u201d and its length is 6, so \u201c--suffix_len\u201d is set to 6.\n$pgcgap --Assemble --platform oxford --ReadsPath Reads/Oxford --reads1 .fasta --genomeSize 4.8m --threads 4 --suffix_len 6 --filter_length 200\nThe results are stored in the \u201cResults/Assembles/Oxford\u201d and \u201cResults/Assembles/Scaf/Oxford\u201d directories. The former contains all intermediate files and genome files, while the latter contains only the assembled genome.\n17.\u00a0Example 3: PacBio reads assembly.\nPacBio also produces only one read file (\u201cReads/PacBio/pacbio.fastq\u201d); the parameter settings are similar to those of Oxford. The strain name is \u201cpacbio\u201d with the suffix \u201c.fastq\u201d and the suffix length is 6, so \u201c--suffix_len\u201d was set to 6.\n$pgcgap --Assemble --platform pacbio --ReadsPath Reads/PacBio --reads1 .fastq --genomeSize 4.8m --threads 4 --suffix_len 6 --filter_length 200\nThe results are stored in the \u201cResults/Assembles/PacBio\u201d and \u201cResults/Assembles/Scaf/PacBio\u201d directories. The former contains all intermediate files and genome files, while the latter contains only the assembled genome.\n18.\u00a0Example 4: hybrid assembly of short reads and long reads.\nPaired-end short reads and long reads in the directory \u201cReads/Hybrid/\u201d are used as inputs. Illumina reads and long reads had been obtained from the same isolates.\n$pgcgap --Assemble --platform hybrid --ReadsPath Reads/Hybrid --short1 short_reads_1.fastq.gz --short2 short_reads_2.fastq.gz --long long_reads_high_depth.fastq.gz --threads 4\nThe results are stored in the \u201cResults/Assembles/Hybrid\u201d directory, and the final assembly is named \u201cassembly.fasta\u201d.\n19. Example 5: Gene prediction and annotation.\nHere, the assembly results of Illumina reads are taken as inputs (\u201cResults/Assembles/Scaf/Illumina/*.fa\u201d). The suffix of the genome is \u201c-8.fa\u201d. When running the program, the value of the \u201c--Scaf_suffix\u201d parameter cannot be quoted. Here, -8.fa should not be quoted.\n$pgcgap --Annotate --scafPath Results/Assembles/Scaf/Illumina --Scaf_suffix -8.fa --genus Escherichia --species \u201cEscherichia coli\u201d --codon 11 --threads 4\nThe generated files are stored in the \u201cResults/Annotations\u201d directory, and files in the directories \u201cResults/Annotations/AAs\u201d, \u201cResults/Annotations/CDs\u201d and \u201cResults/Annotations/GFF\u201d will be used for subsequent analysis.\n20.\u00a0Example 6: Constructing the single-copy core protein tree and core SNP tree.\nThe phylogenetic trees of single-copy core proteins and single-copy core gene SNPs will be constructed using the six\nE. coli\ngenomes sequenced by Illumina as datasets. The input files are the amino acid sequence files (\u201cResults/Annotations/AAs/*.faa\u201d) and the nucleotide sequence files (\u201cResults/Annotations/CDs/*.ffn\u201d) obtained by genome annotation. Amino acid files and nucleotide files must be suffixed with \u201c.faa\u201d and \u201c.ffn\u201d, respectively. The \u201c.faa\u201d and \u201c.ffn\u201d files of the same strain should have the same prefix name. The name of protein IDs and gene IDs in the amino acid file and nucleotide file should start with the strain name. The Prokka\n14\nsoftware was suggested to generate the input files.\n$pgcgap --CoreTree --CDsPath Results/Annotations/CDs --AAsPath Results/Annotations/AAs --codon 11 --strain_num 6 --threads 4\nThe result files are stored in the \u201cResults/CoreTrees\u201d directory. \u201cALL.core.protein.*.support\u201d and \u201cALL.core.snp.*.support\u201d are the phylogenetic tree files of the single-copy core proteins and the core SNPs constructed with the best-fit model of evolution, respectively. Users can import these two files into MEGA\n32\nor iTOL\n33\nto view the topology.\n21.\u00a0Example 7: Constructing the single-copy core protein tree only.\nIf the \u201c--CDsPath\u201d was set to \u201cNO\u201d, the nucleotide files will not be needed, and the phylogenetic tree of core SNPs will not be constructed.\n$pgcgap --CoreTree --CDsPath NO --AAsPath Results/Annotations/AAs --codon 11 --strain_num 6 --threads 4\n22.\u00a0Example 8: pan-genome analysis and phylogenetic tree construction.\nGFF3 files (With \u201c.gff\u201d as the suffix) of each strain are placed into a directory (\u201cResults/Annotations/GFF/*.gff\u201d). They must contain the nucleotide sequence at the end of the file. Protein sequence files (one per species) in FASTA format under another directory are also needed (\u201cResults/Annotations/AAs/*.faa\u201d) if the parameter \u201c--PanTree\u201d is provided for constructing a phylogenetic tree. It should be noted that the \u201c*.gff\u201d file and the \u201c*.faa file must correspond. We strongly recommend using Prokka\n14\nto generate files. If the \u201c--Annotate\u201d function was run first, the files were generated automatically.\n$pgcgap --Pan --codon 11 --strain_num 6 --threads 4 --GffPath Results/Annotations/GFF --PanTree --AAsPath Results/Annotations/AAs\nThe results are stored in the \u201cResults/PanGenome\u201d directory. A spreadsheet named \u201cgene_presence_absence.csv\u201d lists each gene and which samples contained it. Users can take the gene_presence_absence.csv file and a trait file to conduct pan-genome wide association studies with the Scoary\n34\nsoftware. At the same time, some visual results (\u201c*.pdf\u201d) are also outputted. \u201cResults/PanGenome/Core/Roary.core.protein.BIC.AIC.AICc.HIVW+I+G4+F.raxml.support\u201d is the phylogenetic tree constructed based on the single-copy core proteins called by the Roary\n15\nsoftware. \u201cHIVW+I+G4+F\u201d represent the best-fit model of evolution for the protein alignments according to AIC\n35\n, AICc, and BIC\n36\nstatistical criteria. If the parameters \u201c--PanTree\u201d and \u201c--AAsPath\u201d were not provided, the phylogenetic tree would not be constructed.\n23.\u00a0Example 9: Inference of orthologous gene groups.\nThe input files are also the amino acid sequence files suffixed with \u201c.faa\u201d (\u201cResults/Annotations/AAs/*.faa\u201d).\n$pgcgap --OrthoF --threads 4 --AAsPath Results/Annotations/AAs\nThe resulting files are placed in the \u201cResults/OrthoFinder/Results_orthoF\u201d directory.\n24.\u00a0Example 10: Compute whole-genome Average Nucleotide Identity.\nThe input file named \u201cscaf.list\u201d contains the absolute path of each genome, one per line. If the \u201c--Assemble\u201d function is run first, the list file is generated automatically. The value of the parameter \u201c--Scaf_suffix\u201d depends on the actual situation, here is \u201c-8.fa\u201d.\n$pgcgap --ANI --threads 4 --queryL scaf.list --refL scaf.list --ANIO Results/ANI/ANIs --Scaf_suffix -8.fa\nThe results are stored in the \u201cResults/ANI\u201d directory. The file \u201cANI\u201d contains comparison information of genome pairs. The document is composed of five columns, each of which represents the query genome, reference genome, ANI value, count of bidirectional fragment mappings, and total query fragments. A heat map file \u201cANI_matrix.pdf\u201d is generated.\n25.\u00a0Example 11: Genome and metagenome similarity estimation using MinHash\nThis requires genome files (complete or draft) in a directory as inputs (Default: Results/Assembles/Scaf/Illumina).\n$pgcgap --MASH --scafPath Results/Assembles/Scaf/Illumina --Scaf_suffix -8.fa\nThe results are stored in the \u201cResults/MASH\u201d directory. The file \u201cMASH\u201d shows the pairwise distance between pair genomes, and each column represents Reference-ID, Query-ID, Mash-distance, P-value, and Matching-hashes. A heat map file named \u201cMASH_matrix.pdf\u201d is generated to describe the similarity of each genome pair.\n26.\u00a0Example 12: COG annotation.\nThe input files are also the amino acid sequence files suffixed with \u201c.faa\u201d (\u201cResults/Annotations/AAs/*.faa\u201d).\n$pgcgap --pCOG --threads 4 --strain_num 6 --AAsPath Results/Annotations/AAs\nThe results are stored in the \u201cResults/COG\u201d directory. The super COG table of each strain (\u201c*.2Scog.table\u201d) and its plot (\u201c*.2Scog.table.pdf\u201d) will be generated. \u201cAll_flags_relative_abundances.table\u201d is a table containing the relative abundance of each flag for all strains, while \u201cAll_flags_relative_abundances.pdf\u201d is the corresponding visualization result.\n27.\u00a0Example 13: Variants calling and phylogenetic tree construction based on a reference genome.\nThe six genomes sequenced by Illumina were chosen as datasets (\u201cReads/Illumina/*.gz\u201d).\nEscherichia coli\nK-12\nsubstr\n. MG1655 was selected as the reference genome and the reference file \u201cMG1655.gbff\u201d in the GenBank format is stored in the \u201cReads\u201d directory. The absolute path of the reference genome (here is \u201c/mnt/h/PGCGAP_Examples/Reads/MG1655.gbff\u201d) is required to run the program.\n$pgcgap --VAR --threads 4 --refgbk /mnt/h/PGCGAP_Examples/Reads/MG1655.gbff --ReadsPath Reads/Illumina --reads1 _1.fastq.gz --reads2 _2.fastq.gz --suffix_len 11 --strain_num 6 --qualtype sanger\nThe resulting files are stored in the \u201cResults/Variants\u201d directory, where the \u201cCore\u201d directory contains the core SNPs of all strains and their phylogenetic tree.\n28.\u00a0Example 14: Screening of contigs for antimicrobial and virulence genes\nThis requires genome files (complete or draft) in a directory as inputs (Default: Results/Assembles/Scaf/Illumina). Users can choose one of the following databases for analysis: argannot\n37\n, card\n38\n, ecoh\n39\n, ecoli_vf (\nhttps://github.com/phac-nml/ecoli_vf\n), ncbi\n40\n, plasmidfinder\n41\n, resfinder\n42\n, and vfdb\n43\n.\n$pgcgap --AntiRes --scafPath Results/Assembles/Scaf/Illumina --Scaf_suffix -8.fa --threads 4 --db ncbi --identity 75 --coverage 50\nThe resulting files are stored in the \u201cResults/AntiRes\u201d directory. \u201c*.tab\u201d files are screening results of each strain, and the \u201csummary.txt\u201d file contains a matrix of gene presence/absence for all strains.\n29.\u00a0Example 15: Perform all analyses for paired-end reads.\nOnly the read file and reference file should be provided. For the sake of flexibility, the \u201cVAR\u201d function needs to be added.\n$pgcgap --All --platform illumina --filter_length 200 --ReadsPath Reads/Illumina --reads1 _1.fastq.gz --reads2 _2.fastq.gz --suffix_len 11 --kmmer 81 --genus Escherichia --species \u201cEscherichia coli\u201d --codon 11 --strain_num 6 --threads 4 --VAR --refgbk /mnt/h/PGCGAP_Examples/Reads/MG1655.gbff --qualtype sanger --PanTree\n30.\u00a0Example 16: Filter short sequences in the genome and assess the status of the genome.\n\u201cAssess\u201d takes the assembled genomes as inputs. First, it assesses the stats of the genome; second, the sequences shorter than \u201c--filter_length\u201d are deleted from the genome. Finally, the stats of the filtered genome are assessed. The results files are stored in the same directory as the inputs.\n$pgcgap --ACC --Assess --scafPath Results/Assembles/Scaf/Illumina --Scaf_suffix -8.fa --filter_length 200\n31.\u00a0Example 17: Construct a phylogenetic tree based on multiple FASTA sequences in one file.\n\u201cSTREE\u201d takes the file containing multiple-FASTA sequences as input. The parameter \u201c--bsnum\u201d represents the number of bootstraps. The results files will be stored in \u201cResults/STREE\u201d. The file \u201cproteins.fas.aln.gb.treefile\u201d contains the final phylogenetic tree.\n$pgcgap --STREE --seqfile Other_inputs/proteins.fas --seqtype p --bsnum 500 --threads 4"
        },
        {
            "header": "Troubleshooting",
            "content": "<p>Troubleshooting advice can be found in Table 2.</p>"
        },
        {
            "header": "Time Taken",
            "content": "<p>The following marked time was tested in the WSL on the laptop. The features of the laptop were as follows: i7-4710MQ CPU (with 4 cores and 8 logical processors), 16 GB DDR3L RAM, 240 G SSD, and 1 T HDD. All commands are called 4 threads.</p><p>Step 1: configuration of WSL, 1 min.</p><p>Step 2: installation of Linux, 43 min.</p><p>Step 3-5: configuration of Linux, 10 min.</p><p>Step 6: installation of Miniconda, 6 min.</p><p>Step 7-12: installation of PGCGAP, 34 min.</p><p>Step 13: download and decompress example datasets, 11 min.</p><p>Step 14: activate the pgcgap environment, 8 s.</p><p>Step 15: Illumina reads assembly by abyss, spades, and auto, 43 min, 12.8 h, and 5.7 h, respectively.</p><p>Step 16: Oxford reads assembly, 1.6 h.</p><p>Step 17: PacBio reads assembly, 54 min.</p><p>Step 18: hybrid assembly of short reads and long reads, 18 min</p><p>Step 19: gene prediction and annotation, 1 h.</p><p>Step 20: constructing the single-copy core protein tree and core SNP tree, 2.6 h.</p><p>Step 21: constructing the single-copy core protein tree only, 2.4 h.</p><p>Step 22: pan-genome analysis and phylogenetic tree constructing, 3 h.</p><p>Step 23: inference of orthologous gene groups, 51 min.</p><p>Step 24: compute whole-genome Average Nucleotide Identity, 17 s.</p><p>Step 25: genome similarity estimation using MinHash, 1 min.</p><p>Step 26: COG annotation, 20.3 h.</p><p>Step 27: variant calling, and phylogenetic tree construction based on the reference genome, 11.8 h.</p><p>Step 28: Screening of contigs for antimicrobial and virulence genes, 30 s.</p><p>Step 29: Perform all functions for paired-end reads, 1.9 d.</p><p>Step 30: Filter short sequences in the genome and assess the status of the genome, 15 s.</p><p>Step 31: Construct a phylogenetic tree based on multiple FASTA sequences in one file, 3 h.</p>"
        },
        {
            "header": "Anticipated Results",
            "content": "<p>The output files of example datasets by PGCGAP can be downloaded at <a href=\"http://bcam.hzau.edu.cn/PGCGAP/PGCGAP_Results.tar.gz\" rel=\"noopener noreferrer\" target=\"_blank\">http://bcam.hzau.edu.cn/PGCGAP/PGCGAP_Results.tar.gz</a>.</p>"
        },
        {
            "header": "References",
            "content": "<p>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Langmead, B. &amp; Salzberg, S. L. Fast gapped-read alignment with Bowtie 2. <em>Nat. Methods</em> <strong>9</strong>, 357 (2012).</p><p>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Li H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. <em>arXiv:1303.3997v2 [q-bio.GN]</em> (2013).</p><p>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Heng Li<em> et al.</em> The Sequence Alignment/Map format and SAMtools. <em>Bioinformatics (Oxford, England)</em> <strong>25</strong>, 2078-2079 (2009).</p><p>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;McKenna, A.<em> et al.</em> The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. <em>Genome Res.</em> <strong>20</strong>, 1297-1303 (2010).</p><p>5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Price, M. N., Dehal, P. S. &amp; Arkin, A. P. FastTree 2--approximately maximum-likelihood trees for large alignments. <em>PLoS One</em> <strong>5</strong>, e9490 (2010).</p><p>6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stamatakis, A. RAxML version 8: a tool for phylogenetic analysis and post-analysis of large phylogenies. <em>Bioinformatics</em> <strong>30</strong>, 1312-1313 (2014).</p><p>7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jackman, S. D.<em> et al.</em> ABySS 2.0: resource-efficient assembly of large genomes using a Bloom filter. <em>Genome Res.</em> <strong>27</strong>, 768-777 (2017).</p><p>8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Nurk, S.<em> et al.</em> Assembling Genomes and Mini-metagenomes from Highly Chimeric Reads.&nbsp;158-170 (Springer Berlin Heidelberg).</p><p>9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Koren, S.<em> et al.</em> Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation. <em>Genome Res.</em> <strong>27</strong>, 722-736 (2017).</p><p>10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wick, R. R., Judd, L. M., Gorrie, C. L. &amp; Holt, K. E. Unicycler: Resolving bacterial genome assemblies from short and long sequencing reads. <em>PLoS Comp. Biol.</em> <strong>13</strong>, e1005595 (2017).</p><p>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chen, S., Zhou, Y., Chen, Y. &amp; Gu, J. fastp: an ultra-fast all-in-one FASTQ preprocessor. <em>Bioinformatics</em> <strong>34</strong>, i884-i890 (2018).</p><p>12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Seemann, T. Prokka: rapid prokaryotic genome annotation. <em>Bioinformatics</em> <strong>30</strong>, 2068-2069 (2014).</p><p>13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jain, C., Rodriguez-R, L. M., Phillippy, A. M., Konstantinidis, K. T. &amp; Aluru, S. High throughput ANI analysis of 90K prokaryotic genomes reveals clear species boundaries. <em>Nat Commun</em> <strong>9</strong>, 5114-5114 (2018).</p><p>14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ondov, B. D.<em> et al.</em> Mash: fast genome and metagenome distance estimation using MinHash. <em>Genome Biology</em> <strong>17</strong>, 132 (2016).</p><p>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Page, A. J.<em> et al.</em> Roary: rapid large-scale prokaryote pan genome analysis. <em>Bioinformatics</em> <strong>31</strong>, 3691-3693 (2015).</p><p>16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Emms, D. M. &amp; Kelly, S. OrthoFinder: phylogenetic orthology inference for comparative genomics. <em>Genome Biology</em> <strong>20</strong>, 238 (2019).</p><p>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Li, W. &amp; Godzik, A. Cd-hit: a fast program for clustering and comparing large sets of protein or nucleotide sequences. <em>Bioinformatics</em> <strong>22</strong>, 1658-1659 (2006).</p><p>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Katoh, K., Misawa, K., Kuma, K. &amp; Miyata, T. MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform. <em>Nucleic Acids Res.</em> <strong>30</strong>, 3059-3066 (2002).</p><p>19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Darriba, D.<em> et al.</em> ModelTest-NG: A New and Scalable Tool for the Selection of DNA and Protein Evolutionary Models. <em>Mol. Biol. Evol.</em> <strong>37</strong>, 291-294 (2019).</p><p>20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kozlov, A. M., Darriba, D., Flouri, T., Morel, B. &amp; Stamatakis, A. RAxML-NG: a fast, scalable and user-friendly tool for maximum likelihood phylogenetic inference. <em>Bioinformatics</em> <strong>35</strong>, 4453-4455 (2019).</p><p>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Suyama, M., Torrents, D. &amp; Bork, P. PAL2NAL: robust conversion of protein sequence alignments into the corresponding codon alignments. <em>Nucleic Acids Res.</em> <strong>34</strong>, W609-612 (2006).</p><p>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Page, A. J.<em> et al.</em> SNP-sites: rapid efficient extraction of SNPs from multi-FASTA alignments. <em>Microb Genom</em> <strong>2</strong>, e000056 (2016).</p><p>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Seemann, T. Abricate, Github <a href=\"https://github.com/tseemann/abricate\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/tseemann/abricate</a>.</p><p>24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Joshi NA &amp; JN, F. Sickle: A sliding-window, adaptive, quality-based trimming tool for FastQ files (Version 1.33) [Software]. Available at <a href=\"https://github.com/najoshi/sickle\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/najoshi/sickle</a>.&nbsp;(2011).</p><p>25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Garrison E &amp; Marth G. Haplotype-based variant detection from short-read sequencing. <em>arXiv preprint arXiv:1207.3907 [q-bio.GN]</em> (2012).</p><p>26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cingolani, P.<em> et al.</em> A program for annotating and predicting the effects of single nucleotide polymorphisms, SnpEff: SNPs in the genome of Drosophila melanogaster strain w1118; iso-2; iso-3. <em>Fly (Austin)</em> <strong>6</strong>, 80-92 (2012).</p><p>27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Seemann, T. Snippy: Rapid haploid variant calling and core genome alignment. Available at <a href=\"https://github.com/tseemann/snippy\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/tseemann/snippy</a>.&nbsp;(2014).</p><p>28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Croucher, N. J.<em> et al.</em> Rapid phylogenetic analysis of large samples of recombinant bacterial whole genome sequences using Gubbins. <em>Nucleic Acids Res.</em> <strong>43</strong>, e15 (2015).</p><p>29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Edgar, R. C. MUSCLE: multiple sequence alignment with high accuracy and high throughput. <em>Nucleic Acids Res.</em> <strong>32</strong>, 1792-1797 (2004).</p><p>30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Castresana, J. Selection of Conserved Blocks from Multiple Alignments for Their Use in Phylogenetic Analysis. <em>Mol. Biol. Evol.</em> <strong>17</strong>, 540-552 (2000).</p><p>31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Minh, B. Q.<em> et al.</em> IQ-TREE 2: New Models and Efficient Methods for Phylogenetic Inference in the Genomic Era. <em>Mol. Biol. Evol.</em> (2020).</p><p>32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kumar, S., Stecher, G., Li, M., Knyaz, C. &amp; Tamura, K. MEGA X: Molecular Evolutionary Genetics Analysis across Computing Platforms. <em>Mol. Biol. Evol.</em> <strong>35</strong>, 1547-1549 (2018).</p><p>33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Letunic, I. &amp; Bork, P. Interactive tree of life (iTOL) v3: an online tool for the display and annotation of phylogenetic and other trees. <em>Nucleic Acids Res.</em> <strong>44</strong>, W242-W245 (2016).</p><p>34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Brynildsrud, O., Bohlin, J., Scheffer, L. &amp; Eldholm, V. Rapid scoring of genes in microbial pan-genome-wide association studies with Scoary. <em>Genome Biology</em> <strong>17</strong>, 238 (2016).</p><p>35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Akaike, H. A new look at the statistical model identification. <em>IEEE Transactions on Automatic Control</em> <strong>19</strong>, 716-723 (1974).</p><p>36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Schwarz, G. Estimating the Dimension of a Model. <em>Ann. Statist.</em> <strong>6</strong>, 461-464 (1978).</p><p>37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gupta, S. K.<em> et al.</em> ARG-ANNOT, a new bioinformatic tool to discover antibiotic resistance genes in bacterial genomes. <em>Antimicrob. Agents Chemother.</em> <strong>58</strong>, 212-220 (2014).</p><p>38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jia, B.<em> et al.</em> CARD 2017: expansion and model-centric curation of the comprehensive antibiotic resistance database. <em>Nucleic Acids Res.</em> <strong>45</strong>, D566-d573 (2017).</p><p>39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ingle, D. J.<em> et al.</em> In silico serotyping of E. coli from short read data identifies limited novel O-loci but extensive diversity of O:H serotype combinations within and between pathogenic lineages. <em>Microbial genomics</em> <strong>2</strong>, e000064-e000064 (2016).</p><p>40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Feldgarden, M.<em> et al.</em> Validating the AMRFinder Tool and Resistance Gene Database by Using Antimicrobial Resistance Genotype-Phenotype Correlations in a Collection of Isolates. <em>Antimicrobial agents and chemotherapy</em> <strong>63</strong>, e00483-00419 (2019).</p><p>41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Carattoli, A.<em> et al.</em> In silico detection and typing of plasmids using PlasmidFinder and plasmid multilocus sequence typing. <em>Antimicrob. Agents Chemother.</em> <strong>58</strong>, 3895-3903 (2014).</p><p>42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zankari, E.<em> et al.</em> Identification of acquired antimicrobial resistance genes. <em>J. Antimicrob. Chemother.</em> <strong>67</strong>, 2640-2644 (2012).</p><p>43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chen, L., Zheng, D., Liu, B., Yang, J. &amp; Jin, Q. VFDB 2016: hierarchical and refined dataset for big data analysis--10 years on. <em>Nucleic Acids Res.</em> <strong>44</strong>, D694-697 (2016).</p>"
        },
        {
            "header": "Acknowledgements",
            "content": "<p>This work was made possible through funding from the National Key R&amp;D Program of China (2017YFD0201201), National Natural Science Foundation of China (31670085, 31970003, 31770003 and 31700002), and China 948 Program of Ministry of Agriculture (2016-X21). H.L. and B.X. contributed equally to this work. Author order was determined by their seniority and initial contribution.</p>"
        }
    ],
    "attributes": {
        "acceptedTermsAndConditions": true,
        "allowDirectSubmit": true,
        "archivedVersions": [],
        "articleType": "Method Article",
        "associatedPublications": [
            {
                "doi": "10.1128/mSystems.00047-20",
                "date": "2020-06-02 13:55:27",
                "title": "In Silico Analysis Highlights the Diversity and Novelty of Circular Bacteriocins in Sequenced Microbial Genomes",
                "authors": [
                    "Bingyue Xin",
                    "Hualin Liu",
                    "Jinshui Zheng",
                    "Chuanshuai Xie",
                    "Ying Gao",
                    "Dadong Dai",
                    "Donghai Peng",
                    "Lifang Ruan",
                    "Huanchun Chen",
                    "Ming Sun"
                ],
                "journal": "mSystems",
                "logo": ""
            },
            {
                "doi": "10.1016/j.foodcont.2020.107696",
                "date": "2020-10-15 03:46:27",
                "title": "Identification and characterization of a novel circular bacteriocin, bacicyclicin XIN-1, from Bacillus sp. Xin1",
                "authors": [
                    "Bingyue Xin",
                    "Haitao Xu",
                    "Hualin Liu",
                    "Shu Liu",
                    "Juanjuan Wang",
                    "Jianping Xue",
                    "Fei Zhang",
                    "Shulin Deng",
                    "Huawei Zeng",
                    "Xin Zeng",
                    "Dayong Xu",
                    "Yi Zhao",
                    "Feng Li",
                    "Guangli Wang"
                ],
                "journal": "Food Control",
                "logo": ""
            },
            {
                "doi": "10.1101/2020.05.26.114520",
                "date": "2020-05-29 12:45:10",
                "title": "BtToxin_Digger: a comprehensive and high-throughput pipeline for mining toxin protein genes from Bacillus thuringiensis",
                "authors": [
                    "Hualin Liu",
                    "Jinshui Zheng",
                    "Dexin Bo",
                    "Yun Yu",
                    "Weixing Ye",
                    "Donghai Peng",
                    "Ming Sun"
                ],
                "journal": "",
                "logo": ""
            },
            {
                "doi": "10.1101/704221",
                "date": "2019-07-31 04:05:12",
                "title": "Population genomics and pathotypic evaluation of the bacterial leaf blight pathogen of rice reveals rapid evolutionary dynamics of a plant pathogen",
                "authors": [
                    "Jinshui Zheng",
                    "Zhiwei Song",
                    "Dehong Zheng",
                    "Huifeng Hu",
                    "Hongxia Liu",
                    "Yancun Zhao",
                    "Ming Sun",
                    "Lifang Ruan",
                    "Fengquan Liu"
                ],
                "journal": "",
                "logo": ""
            },
            {
                "doi": "10.1099/ijsem.0.004372",
                "date": "2020-08-21 16:14:42",
                "title": "Streptomyces lycii sp. nov., an endogenous actinomycete isolated from Lycium ruthenicum",
                "authors": [
                    "Liran Ma",
                    "Hong Zeng",
                    "Zhanfeng Xia",
                    "Xiaoxia Luo",
                    "Lili Zhang",
                    "Chuanxing Wan"
                ],
                "journal": "International Journal of Systematic and Evolutionary Microbiology",
                "logo": ""
            },
            {
                "doi": "10.1099/ijsem.0.004357",
                "date": "2020-08-13 17:21:13",
                "title": "Streptomyces apocyni sp. nov., an endogenous actinomycete isolated from Apocynum venetum",
                "authors": [
                    "Wen-Xiang Liu",
                    "Li-Ran Ma",
                    "Zhan-Feng Xia",
                    "Hong Zeng",
                    "Xiao-Xia Luo",
                    "Li-Li Zhang",
                    "Chuan-Xing Wan"
                ],
                "journal": "International Journal of Systematic and Evolutionary Microbiology",
                "logo": ""
            },
            {
                "doi": "10.1099/ijsem.0.004299",
                "date": "2020-07-03 16:04:15",
                "title": "Actinokineospora pegani sp. nov., an endophytic actinomycete isolated from the surface-sterilized root of Peganum harmala L.",
                "authors": [
                    "Yan-Juan Lei",
                    "Zhan-Feng Xia",
                    "Xiao-Xia Luo",
                    "Li-Li Zhang"
                ],
                "journal": "International Journal of Systematic and Evolutionary Microbiology",
                "logo": ""
            }
        ],
        "authors": [
            {
                "id": 5531725,
                "identity": "54c01435-6f8a-4392-8c54-ff0f36bd615a",
                "order_by": 1,
                "name": "Hualin Liu",
                "email": "",
                "orcid": "https://orcid.org/0000-0002-3630-5522",
                "institution": "Huazhong Agricultural University",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Hualin",
                "middleName": "",
                "lastName": "Liu",
                "suffix": ""
            },
            {
                "id": 5531726,
                "identity": "5b5e3d61-a253-4282-a07e-46e13db5e280",
                "order_by": 2,
                "name": "Bingyue Xin",
                "email": "",
                "orcid": "",
                "institution": "Huazhong Agricultural University",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Bingyue",
                "middleName": "",
                "lastName": "Xin",
                "suffix": ""
            },
            {
                "id": 5531727,
                "identity": "dadd4388-5079-408c-b85f-d464450a1d47",
                "order_by": 3,
                "name": "Jinshui Zheng",
                "email": "jszheng@mail.hzau.edu.cn",
                "orcid": "https://orcid.org/0000-0002-0147-5900",
                "institution": "Huazhong Agricultural University",
                "correspondingAuthor": true,
                "prefix": "",
                "firstName": "Jinshui",
                "middleName": "",
                "lastName": "Zheng",
                "suffix": ""
            },
            {
                "id": 5531728,
                "identity": "8b1431b9-67fd-47a4-9ca4-115c64ed21b9",
                "order_by": 4,
                "name": "Hao Zhong",
                "email": "",
                "orcid": "",
                "institution": "Huazhong Agricultural University",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Hao",
                "middleName": "",
                "lastName": "Zhong",
                "suffix": ""
            },
            {
                "id": 5531729,
                "identity": "796588e7-b3ca-40d1-ace0-9fcd2680cb01",
                "order_by": 5,
                "name": "Yun Yu",
                "email": "",
                "orcid": "",
                "institution": "Huazhong Agricultural University",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Yun",
                "middleName": "",
                "lastName": "Yu",
                "suffix": ""
            },
            {
                "id": 5531730,
                "identity": "ffead989-525e-4994-a49c-a1f1f4c572d4",
                "order_by": 6,
                "name": "Donghai Peng",
                "email": "",
                "orcid": "",
                "institution": "Huazhong Agricultural University",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Donghai",
                "middleName": "",
                "lastName": "Peng",
                "suffix": ""
            },
            {
                "id": 5531731,
                "identity": "fbc812bd-c3fa-4503-b998-30c8ccc60800",
                "order_by": 7,
                "name": "Ming Sun",
                "email": "m98sun@mail.hzau.edu.cn",
                "orcid": "https://orcid.org/0000-0001-5465-5983",
                "institution": "Huazhong Agricultural University",
                "correspondingAuthor": true,
                "prefix": "",
                "firstName": "Ming",
                "middleName": "",
                "lastName": "Sun",
                "suffix": ""
            }
        ],
        "badges": [],
        "createdAt": "2020-01-16 10:23:20",
        "currentVersionCode": 5,
        "declarations": "",
        "doi": "10.21203/rs.2.21224/v5",
        "doiUrl": "https://doi.org/10.21203/rs.2.21224/v5",
        "draftVersion": [],
        "editorialEvents": [],
        "editorialNote": "",
        "failedWorkflow": [],
        "files": [
            {
                "id": 5079318,
                "identity": "b70692de-b0fc-44b4-99dd-470119188344",
                "added_by": "auto",
                "created_at": "2021-01-19 11:04:35",
                "extension": "jpg",
                "order_by": 1,
                "title": "Figure 1",
                "display": "",
                "copyAsset": false,
                "role": "figure",
                "size": 2034471,
                "visible": true,
                "origin": "",
                "legend": "Ten frequently used prokaryotic genomics and comparative genomics analysis processes were integrated into PGCGAP as different modules. Modules can be used separately or in combinations for various purposes.",
                "description": "",
                "filename": "PCGAPv1.0.19.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/90ecb915418cd2cd838f4d26.jpg"
            },
            {
                "id": 13647865,
                "identity": "be298d8e-808b-4bf1-91a9-2cb50b0ad631",
                "added_by": "auto",
                "created_at": "2021-09-17 09:30:18",
                "extension": "pdf",
                "order_by": 0,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "manuscript-pdf",
                "size": 504668,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "manuscript.pdf",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/8d10ec3a-05c5-4f08-be16-a1daec0c1771.pdf"
            },
            {
                "id": 5079397,
                "identity": "28b7d2e8-e4ca-41aa-9868-d22207a2785f",
                "added_by": "auto",
                "created_at": "2021-01-19 11:07:34",
                "extension": "jpg",
                "order_by": 1,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 441863,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryFigureS3.AphylogenetictreeofsinglecopycoreproteinscalledbyPan.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/c562253787bbbe93ff815c01.jpg"
            },
            {
                "id": 5079396,
                "identity": "2620bb1f-ff20-4197-8bbc-7af8db494619",
                "added_by": "auto",
                "created_at": "2021-01-19 11:07:34",
                "extension": "jpg",
                "order_by": 2,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 639975,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryFigureS2.Plotsofscriptsfmplot.pyandplot3Dpie.R.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/2c9eeb9637318acd434da9f8.jpg"
            },
            {
                "id": 5079311,
                "identity": "1e58c7b6-96c1-4fcf-9ee7-12f6add7875d",
                "added_by": "auto",
                "created_at": "2021-01-19 11:04:34",
                "extension": "jpg",
                "order_by": 3,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 1252737,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryFigureS1.ThecorrelationmatrixheatmapdrawnbyfunctionANIofPGCGAP.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/df3e68603e936c5faf688759.jpg"
            },
            {
                "id": 5079454,
                "identity": "111433b8-fe66-4c20-8517-cbdef22f1c09",
                "added_by": "auto",
                "created_at": "2021-01-19 11:10:34",
                "extension": "jpg",
                "order_by": 4,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 1176900,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryFigureS5.Aheatmapdepictstherelativeabundanceofeachflagforallstrains.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/6618090613c0a37ed7fb6845.jpg"
            },
            {
                "id": 5079460,
                "identity": "23a9cd40-83cc-47f8-85de-0a9269fee894",
                "added_by": "auto",
                "created_at": "2021-01-19 11:10:35",
                "extension": "jpg",
                "order_by": 5,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 2294361,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryFigureS4.ApicturedescribesthefrequencyofeachflagforthestrainSRR9620252.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/39b22128d952d6cd4b1ed034.jpg"
            },
            {
                "id": 5079474,
                "identity": "915e9f46-1ac1-4ff4-a8be-0c143d03f438",
                "added_by": "auto",
                "created_at": "2021-01-19 11:13:34",
                "extension": "jpg",
                "order_by": 6,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 318471,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryFigureS6.ArootedspeciestreeforthespeciesbeinganalyzedinferredbyOrthoF.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/11165ba8270afa9ec9364881.jpg"
            },
            {
                "id": 5079455,
                "identity": "b5157a59-64a7-4846-b14f-5426c565f4c2",
                "added_by": "auto",
                "created_at": "2021-01-19 11:10:34",
                "extension": "jpg",
                "order_by": 7,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 407909,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryFigureS7.PhylogenetictreeofsinglecopycoreproteinsgeneratedbymoduleCoreTree.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/b871c2d595b89a71d1e280c6.jpg"
            },
            {
                "id": 5079405,
                "identity": "d27d6f69-e888-4530-998a-93dc6a1761bf",
                "added_by": "auto",
                "created_at": "2021-01-19 11:07:35",
                "extension": "jpg",
                "order_by": 8,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 378656,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryFigureS8.SNPsphylogenetictreeofSinglecopycoregenesgeneratedbymoduleCoreTree.jpg",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/14f5072fd546ee4a459a08b3.jpg"
            },
            {
                "id": 5079401,
                "identity": "5399a446-9ab4-436e-b720-fdc242b2066d",
                "added_by": "auto",
                "created_at": "2021-01-19 11:07:34",
                "extension": "mp4",
                "order_by": 9,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 2871634,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryVideo1EnableWSL.mp4",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/7e617349956ace2851ae41ae.mp4"
            },
            {
                "id": 5079458,
                "identity": "0ee44d78-35dc-4511-99b3-1a5fc81c2fcb",
                "added_by": "auto",
                "created_at": "2021-01-19 11:10:34",
                "extension": "mp4",
                "order_by": 10,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 6902530,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryVideo2InstallUbuntu.mp4",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/60b3c5a1fba8c57a4320b522.mp4"
            },
            {
                "id": 5079321,
                "identity": "4e861786-eaee-46b5-b940-db92878b2c51",
                "added_by": "auto",
                "created_at": "2021-01-19 11:04:35",
                "extension": "mp4",
                "order_by": 11,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 15502831,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryVideo4InstallBioconda.mp4",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/e594140e01c110e05a50ea9a.mp4"
            },
            {
                "id": 5079328,
                "identity": "f0e8d6ec-9ef9-4065-9fe6-1dc6b9eaa57f",
                "added_by": "auto",
                "created_at": "2021-01-19 11:04:36",
                "extension": "mp4",
                "order_by": 12,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 21847296,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryVideo5InstallPGCGAP.mp4",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/facb2e8cf317aa5407b474b2.mp4"
            },
            {
                "id": 5079323,
                "identity": "f3087558-e39c-48d3-afee-c94304250cdc",
                "added_by": "auto",
                "created_at": "2021-01-19 11:04:35",
                "extension": "docx",
                "order_by": 13,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 15024,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "Table1.Suggestedhardwarerequirementsforabioinformaticsanalysisplatform.docx",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/80e3cc00949418bd6a0f0e1c.docx"
            },
            {
                "id": 5079462,
                "identity": "f2ad811e-23d6-4e1c-ab39-3c2462a283fe",
                "added_by": "auto",
                "created_at": "2021-01-19 11:10:35",
                "extension": "docx",
                "order_by": 14,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 22575,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "Table2.Troubleshooting.docx",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/d0bc50fa914121df2e8e688e.docx"
            },
            {
                "id": 5079644,
                "identity": "eaab314e-09cb-4350-bf7d-7516103ae1c4",
                "added_by": "auto",
                "created_at": "2021-01-19 11:16:34",
                "extension": "mp4",
                "order_by": 15,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 5726285,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "SupplementaryVideo3ConfigureUbuntu.mp4",
                "url": "https://assets.researchsquare.com/files/pex-807/v5/58fafd958edb0bcfc54d338a.mp4"
            }
        ],
        "financialInterests": "The authors declare no competing financial interests.",
        "fulltextSource": "",
        "fullText": "",
        "funders": [],
        "hasOptedInToPreprint": true,
        "hasPassedJournalQc": "",
        "hideJournal": true,
        "highlight": "",
        "institution": "",
        "isAuthorSuppliedPdf": false,
        "isDeskRejected": "",
        "isHiddenFromSearch": false,
        "isInQc": false,
        "isInWorkflow": true,
        "journal": {
            "display": true,
            "email": "protocol.exchange@nature.com",
            "identity": "protocol-exchange",
            "isNatureJournal": false,
            "hasQc": false,
            "allowDirectSubmit": true,
            "externalIdentity": "",
            "sideBox": "",
            "submissionUrl": "https://protocolexchange.researchsquare.com/submission",
            "title": "Protocol Exchange",
            "twitterHandle": ""
        },
        "keywords": "comparative genomics, COG annotation, phylogenetic orthology, phylogenetic analysis, variants calling, pan-genome, genome assembly, gene prediction, genome annotation, genome distance, Average Nucleotide Identity, PGCGAP",
        "license": {
            "name": "CC BY 4.0",
            "url": "https://creativecommons.org/licenses/by/4.0/"
        },
        "manuscriptAbstract": "<p>More and more frequently, genomics and comparative genomics have been used as routine methods for general microbiological research. However, using several tools or even writing some scripts are required for completing a simple analysis, which is complicated for most biological researchers. To simplify the operation process, particularly for the convenience of microbiologists, here we have developed PGCGAP, a comprehensive, malleable, and easily installed prokaryotic genomic and comparative genomic analysis pipeline. PGCGAP implements genome assembly, gene prediction and annotation, genome and metagenome distance estimation, phylogenetic analysis, COG annotation, pan-genome analysis, inference of orthologous gene groups, variant calling and annotation, and screening for antimicrobial and virulence genes. Although we have tried our best to simplify the installation and usage of PGCGAP, it may be difficult for non-bioinformaticians to master it. Therefore, a protocol was created to help microbiologists without any experience in bioinformatics to establish their bioinformatics platform and perform routine analyses. This protocol shows how to choose the equipment to install a Linux subsystem on a laptop with a Windows 10 system, to install the PGCGAP and perform all analyses with an example dataset. The protocol requires a basic understanding of Linux, so an additional web page was written to help uninitiated users learn Linux and whole-genome sequencing (<a href=\"https://github.com/liaochenlanruo/pgcgap/wiki/Learning-bioinformatics\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/liaochenlanruo/pgcgap/wiki/Learning-bioinformatics</a> or <a href=\"http://bcam.hzau.edu.cn/linuxwgs.php\" rel=\"noopener noreferrer\" target=\"_blank\">http://bcam.hzau.edu.cn/linuxwgs.php</a>).</p>",
        "manuscriptTitle": "Build a Bioinformatic Analysis Platform and Apply it to Routine Analysis of Microbial Genomics and Comparative Genomics",
        "msid": "",
        "msnumber": "",
        "nonDraftVersions": [
            {
                "code": 1,
                "date": "2020-01-27 20:28:44",
                "doi": "10.21203/rs.2.21224/v1",
                "editorialEvents": [
                    {
                        "type": "communityComments",
                        "content": 1
                    }
                ],
                "status": "published",
                "journal": {
                    "display": true,
                    "email": "info@researchsquare.com",
                    "identity": "researchsquare",
                    "isNatureJournal": false,
                    "hasQc": true,
                    "allowDirectSubmit": true,
                    "externalIdentity": "",
                    "sideBox": "",
                    "submissionUrl": "/submission",
                    "title": "Research Square",
                    "twitterHandle": "researchsquare"
                }
            },
            {
                "code": 2,
                "date": "2020-03-12 18:29:19",
                "doi": "10.21203/rs.2.21224/v2",
                "editorialEvents": [
                    {
                        "type": "communityComments",
                        "content": 0
                    }
                ],
                "status": "published",
                "journal": {
                    "display": true,
                    "email": "info@researchsquare.com",
                    "identity": "researchsquare",
                    "isNatureJournal": false,
                    "hasQc": true,
                    "allowDirectSubmit": true,
                    "externalIdentity": "",
                    "sideBox": "",
                    "submissionUrl": "/submission",
                    "title": "Research Square",
                    "twitterHandle": "researchsquare"
                }
            },
            {
                "code": 3,
                "date": "2020-06-18 16:54:04",
                "doi": "10.21203/rs.2.21224/v3",
                "editorialEvents": [
                    {
                        "type": "communityComments",
                        "content": 0
                    }
                ],
                "status": "published",
                "journal": {
                    "display": true,
                    "email": "info@researchsquare.com",
                    "identity": "researchsquare",
                    "isNatureJournal": false,
                    "hasQc": true,
                    "allowDirectSubmit": true,
                    "externalIdentity": "",
                    "sideBox": "",
                    "submissionUrl": "/submission",
                    "title": "Research Square",
                    "twitterHandle": "researchsquare"
                }
            },
            {
                "code": 4,
                "date": "2020-11-30 09:08:46",
                "doi": "10.21203/rs.2.21224/v4",
                "editorialEvents": [
                    {
                        "type": "communityComments",
                        "content": 0
                    }
                ],
                "status": "published",
                "journal": {
                    "display": true,
                    "email": "info@researchsquare.com",
                    "identity": "researchsquare",
                    "isNatureJournal": false,
                    "hasQc": true,
                    "allowDirectSubmit": true,
                    "externalIdentity": "",
                    "sideBox": "",
                    "submissionUrl": "/submission",
                    "title": "Research Square",
                    "twitterHandle": "researchsquare"
                }
            },
            {
                "code": 5,
                "date": "2021-01-19 11:04:32",
                "doi": "10.21203/rs.2.21224/v5",
                "editorialEvents": [
                    {
                        "type": "communityComments",
                        "content": 0
                    }
                ],
                "status": "published",
                "journal": {
                    "display": true,
                    "email": "info@researchsquare.com",
                    "identity": "researchsquare",
                    "isNatureJournal": false,
                    "hasQc": true,
                    "allowDirectSubmit": true,
                    "externalIdentity": "",
                    "sideBox": "",
                    "submissionUrl": "/submission",
                    "title": "Research Square",
                    "twitterHandle": "researchsquare"
                }
            }
        ],
        "origin": "",
        "ownerIdentity": "0d72ddf2-9c96-4825-a699-1ef90f64bb6e",
        "owner": [],
        "postedDate": "January 19th, 2021",
        "published": true,
        "revision": "",
        "status": "posted",
        "subjectAreas": [
            {
                "id": 1391856,
                "name": "Computational biology and bioinformatics"
            }
        ],
        "tags": [],
        "versionOfRecord": [],
        "versionCreatedAt": "2021-01-19 11:04:32",
        "video": "",
        "vorDoi": "",
        "vorDoiUrl": "",
        "workflowStages": []
    }
}