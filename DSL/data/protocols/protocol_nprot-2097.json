{
    "identity": "nprot-2097",
    "title": "COBRA Toolbox 2.0",
    "content": [
        {
            "header": "Introduction",
            "content": "COnstraint-Based Reconstruction and Analysis \\(COBRA) methods have been successfully employed in the field of microbial metabolic engineering<sup>1-3</sup> and are being extended to modeling transcriptional<sup>4-8</sup> and signaling<sup>9-11</sup> networks and the field of public health<sup>12</sup>. Specifically, COBRA methods have been used to guide metabolic pathway engineering, to model pathogens<sup>13</sup> and host-pathogen interactions<sup>14</sup> and to assess the impact of disease states on human metabolism<sup>15</sup>. A wide variety of COBRA methods have been developed over the years<sup>16, 17</sup>. COBRA methods have been employed in hundreds of research articles over the past decade that characterize genome-scale properties of metabolic networks and their phenotypic states<sup>18-20</sup>.\r\n\n\n\r\n\n\nThe COBRA approach focuses on employing physicochemical, data-driven, and biological constraints to enumerate the set of feasible phenotypic states of a reconstructed biological network in a given condition \\(<a href=\"http://www.nature.com/protocolexchange/system/uploads/1798/original/Figure_1.pdf\" >Figure 1a</a>). These constraints include compartmentalization, mass conservation, molecular crowding<sup>21</sup>, and thermodynamic directionality<sup>22-24</sup>. More recently, transcriptome data have been used to reduce the size of the set of computed feasible states<sup>14, 25, 26</sup>. Although COBRA methods may not provide a unique solution, they provide a reduced set of solutions that may be used to guide biological hypothesis development<sup>27</sup>. The COBRA Toolbox provides researchers with a high-level interface to a variety of COBRA methods. Detailed descriptions of COBRA methods can be found in a variety of reviews<sup>3, 16, 28, 29</sup>.\r\n\n\n\r\n\n\nThe biological network models that are analyzed with COBRA methods are constructed in a bottom-up fashion from bibliomic and experimental data and thus represent Biochemically, Genetically, and Genomically \\(<a href=\"http://bigg.ucsd.edu\">BiGG</a>) consistent knowledgebases<sup>30, 31</sup>. BiGG knowledgebases are manually-curated 2-D genome annotations<sup>32</sup> that relate biological functions, such as metabolic reactions, to the genome through the use of the gene-protein-reaction formalism<sup>33</sup> \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1798/original/Figure_1.pdf>Figure 1b</a>). Application of the BiGG formalism to metabolism has been particularly successful, and metabolic reconstructions are available for many organisms<sup>34-38, 39, 40-42</sup>. A detailed protocol describing the construction of high-quality BiGG knowledgebases for metabolism, and their transformation into mathematical models has been recently published<sup>43</sup>.\r\n\n\n\r\n\n\nThe first release of the COBRA Toolbox in 2007 provided access to a variety of methods, including flux balance analysis, gene essentiality analysis, and minimization of metabolic adjustment analysis \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1803/original/Table_1.pdf>Table 1</a>). Since the release of the first version of the COBRA Toolbox, many additional COBRA-related methods have been published<sup>44-48</sup>. In version 2.0 of the COBRA Toolbox, we have extended the capabilities to include: geometric FBA<sup>44</sup>, Loop law<sup>49</sup>, creation of context-specific subnetwork models using omics data<sup>14, 25</sup>, Monte Carlo sampling<sup>15, 50-52</sup>, <sup>13</sup>C fluxomics, gap filling<sup>45 , 53</sup>, metabolic engineering<sup>46-48</sup>, and visualization of computational models of metabolism \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1803/original/Table_1.pdf>Table 1</a> / <a href=http://www.nature.com/protocolexchange/system/uploads/1799/original/Figure_2.pdf>Figure 2</a>).\r\n\n\n\r\n\n\nAdditionally, methods<sup>5, 24, 54</sup> and resources<sup>55</sup> have been developed by community members that can serve as add-ons to the core COBRA Toolbox or provide models or other input. Specifically, Chandrasekaran and Price<sup>54</sup> have developed a method\u2014 probabilistic regulation of metabolism \\(PROM)\u2014that incorporates regulatory information from transcriptome, ChIP-chip, or literature data into a metabolic network model. Fleming and Thiele<sup>24</sup> developed an extension to thermodynamically constrain reaction directionality And, Henry et al. <sup>55</sup> have developed a web-based resource \\(<a href=http://www.theseed.org/models/>The Model SEED</a>) that provides access to draft metabolic network reconstructions for a variety of organisms\u2014these models may be imported into the COBRA Toolbox for further refinement and analysis.\r\n\n\n\r\n\n\nThis protocol aims to provide researchers with the ability to use the in silico methods included in the Toolbox with only high-level knowledge of the algorithms. Because of the wide range of creative uses for COBRA methods, not all of the Toolbox's capabilities are described in this protocol; additional functionalities are described in the Documentation.\r\n\n\n\r\n\n\nThe COBRA Toolbox supports models in the Systems Biology Markup Language \\(SBML) format<sup>56</sup>. Importation of the models into MATLAB is dependent on libSBML<sup>57</sup> and the SBMLToolbox<sup>58</sup>. Because SBML does not yet provide complete support for a few key COBRA parameters, we provide an explicit description of the COBRA extensions to SBML  in <a href=http://www.nature.com/protocolexchange/system/uploads/1808/original/Supplementary_Material.pdf>Supplementary Material</a>. The COBRA Toolbox is available for download from <a href=http://opencobra.sourceforge.net>The openCOBRA Project</a>.  Detailed documentation in html format is available in the  \u0333docs\u2018 folder of the COBRA Toolbox.\r\n\n\n\r\n\n\n**Tool Box Installation**\r\n\n\nThere are two options for installing the COBRA Toolbox  \u0333\u00e0 la carte\u2019 or bundled. The \u00e0 la carte version only contains the COBRA Toolbox. The bundled version includes the COBRA Toolbox, libSBML, the SBMLToolbox, GLPK, and glpkmex. The bundled version has been tested on Mac OS X 10.6 Snow Leopard \\(64-bit) Ubuntu GNU/Linux Lucid \\(64-bit), Windows XP \\(32-bit), and Windows 7 \\(64-bit). Separate installation instructions are provided in Equipment Setup.\r\n\n\n\r\n\n\n**COBRA-compliant SBML file**\r\n\n\nDocumentation on the SBML standard is available on the <a href=http://sbml.org>SBML website</a>  and a description of a COBRA-compliant SBML file is provided in the <a href=http://www.nature.com/protocolexchange/system/uploads/1808/original/Supplementary_Material.pdf>Supplementary Material</a>. Sample models in COBRA-compliant SBML may be downloaded from the <a href=http://bigg.ucsd.edu>BiGG knowledgebase</a><sup>31</sup> or draft models may be downloaded from the <a href=http://www.theseed.org/models>Model SEED</a><sup>55</sup>. The model files must include the following information for all calculations: stoichiometry of each reaction, upper and lower bounds of each reaction and objective function coefficients for each reaction.  Several functions within the Toolbox<sup>47, 48</sup> require information that is not, yet, in the SBML standard or scheduled for removal in SBML 3 and beyond. The gene-reaction associations are essential for relating the metabolic reactions to the genome and the subsystem is useful for ontological classification. Metabolite formulas and charges are necessary to make sure the model is physically consistent \\(no generation of mass or energy).  See <a href=http://www.nature.com/protocolexchange/system/uploads/1808/original/Supplementary_Material.pdf>Supplementary Material</a>.\r\n\n\n\r\n\n\n**Metabolic map files**\r\n\n\nThe visualization tools require text files of the coordinates for placing metabolites and reactions on a map. Map coordinate files for many metabolic pathways are available from the BiGG knowledgebase. The COBRA Toolbox relates COBRA SBML models to the map coordinate files via the reaction and metabolite ids. A map file for glycolysis may be used with various SBML models as long as the identifiers match. The format for a map file is described in <a href=http://www.nature.com/protocolexchange/system/uploads/1808/original/Supplementary_Material.pdf>Supplementary Material</a>."
        },
        {
            "header": "Equipment",
            "content": "\u2022 The <a href=http://opencobra.sourceforge.net>COBRA Toolbox</a> version 2.0 or above\r\n\n\n\u2022 A computer capable of running MATLAB \uf0b7 Version 7.0 or above of MATLAB \\(Mathworks Inc.) numerical computation and visualization software \\(http://www.mathworks.com) \r\n\n\n\u2022 libSBML programming library 4.0.1 or above \\(http://www.sbml.org)  \r\n\n\n\u2022 SBMLToolbox version 3.1.1 or above for MATLAB to allow reading and writing models in SBML format \\(http://www.sbml.org) \r\n\n\n\u2022 A linear programming \\(LP) solver. Currently the COBRA Toolbox supports:\r\n\n\n    o Gurobi \\(Gurobi Optimization. http://www.gurobi.com) through Gurobi Mex\r\n\n\n\\(http://www.convexoptimization.com/wikimization/index.php/Gurobi_\r\n\n\nmex) \r\n\n\n o CPLEX \\(ILOG Inc.) through Tomlab \\(Tomlab Optimization Inc.http://tomopt.com) \r\n\n\n    o GLPK \\(http://www.gnu.org/software/glpk) through glpkmex \\(http://glpkmex.sourceforge.net) \u2013 Note, GLPK does not provide accurate solutions for OptKnock or GDLS calculations as implemented in the Toolbox.\r\n\n\n\r\n\n\n**Caution\\!** Other solvers \\(such as Mosek, http://www.mosek.com; LINDO, http://www.lindo.com; and PDCO, http://www.stanford.edu/group/SOL/software/pdco.html), may work with the COBRA Toolbox but they have not been validated.\r\n\n\n\r\n\n\n**Critical\\!** For best performance it may be necessary to adjust parameters of the installed solver.\r\n\n\n\r\n\n\n\u2022 A quadratic programming \\(QP) solver. \\(optional) Currently the COBRA toolbox supports:\r\n\n\n    o CPLEX \\(ILOG Inc.) through Tomlab \r\n\n\n    o QPNG \\(part of GLPK) \u2013 Note, QPNG does not provide accurate solutions for MOMA as implemented in the Toolbox. \r\n\n\n**Caution\\!** Other solvers \\(such as Mosek and PDCO), may work with the COBRA Toolbox but they have not been validated.\r\n\n\n**Critical\\!** For best performance it may be necessary to adjust parameters of the installed solver.\r\n\n\n\u2022 A nonlinear programming \\(NLP) solver. \\(optional) Currently the COBRA toolbox supports:\r\n\n\n    o SNOPT through Tomlab \r\n\n\n**Critical\\!** For best performance it may be necessary to adjust parameters of the installed solver.\r\n\n\n\r\n\n\n**Equipment Setup**\r\n\n\n\u00e0 la carte installation of Toolbox \r\n\n\n\u2022 Install MATLAB\r\n\n\n\u2022 Install libSBML, the SBML Toolbox, and selected solvers according to their specific instructions.\r\n\n\n\u2022 Unpack the COBRA 2.0 archive\r\n\n\nBundled installation of Toolbox:\r\n\n\n\u2022 Install MATLAB \r\n\n\n\u2022  Unpack the COBRA 2.0 archive\r\n\n\n    o Cobra_Install_Path is the path to the top level directory for the COBRA Toolbox\r\n\n\n\u2022  Update Shared Library Path \u2014 Mac OS X and GNU/Linux Only \r\n\n\n    o Mac OS:    DYLD_LIBRARY_PATH=Cobra_Install_Path/external/toolboxes/SBMLToolbox_3.1.2/toolbox/\r\n\n\n    o GNU/Linux: LD_LIBRARY_PATH=Cobra_Install_Path/external/toolboxes/SBMLToolbox_3.1.2/toolbox"
        },
        {
            "header": "Procedure",
            "content": "Notes on nomenclature: _italics_ denotes a _parameter_ that is supplied to a function. A bracketed _\\[parameter]_ is optional. >> denotes the Matlab command line; anything following >> is meant to be entered on the command line. All time estimates for the functions are predicate on a model of about 1200 genes, 2300 reactions, 1800, metabolites, and a 2.4 GHz Intel Core 2 Duo processor. When substantial preprocessing efforts are required, we provide time estimates based on personal experience.\r\n\n\n\r\n\n\n**Initializing the Toolbox**\r\n\n\n1 | Navigate to the directory where you installed the Toolbox: >> initCobraToolbox\\()\r\n\n\n2| Save the paths added if desired: >> savepath\\()\r\n\n\n\r\n\n\n**Changing COBRA solvers**\r\n\n\n3| Set the solvers used by the COBRA Toolbox using the following function:\r\n\n\n\r\n\n\n>> changeCobraSolver\\(_solverName, \\[solverType]_);\r\n\n\n\r\n\n\nVariables are defined as follows: _solverName_ specifies the solver package to use; the COBRA Toolbox currently supports  \u0333gurobi\u2018, 'tomlab_cplex', 'glpk', and 'qpng'. _solverType_ \\(default 'LP') specifies the type of problems \\('LP', 'MILP', 'QP', 'MIQP', 'NLP') to solve with the solver specified by solverName. When changeCobraSolver is called without any arguments, it will return the names of the current solvers settings.\r\n\n\n\r\n\n\n**Run COBRA Toolbox test suite \\[~10\n3\ns]**\r\n\n\n4 | The test suite contains scripts that test the functionality of scripts within the Toolbox. The scripts in the the testing directory provide useful examples of many of the Toolbox's functions.\r\n\n\n\r\n\n\n>> testAll\\() \r\n\n\n\r\n\n\ntestAll sequentially navigates the test suite directory \\(testing) and runs each test. Upon completion, it displays which tests were completed successfully and which failed. \r\n\n\n**Caution\\!** For solver suites other than Gurobi or Tomlab, the user may encounter failures that require tuning of solver parameters.\r\n\n\n**Critical\\!** It is not necessary for all tests to be passed to use the COBRA Toolbox for your applications.  It is only necessary that the tests related to your work do not fail.\r\n\n\n\r\n\n\n**Read COBRA-compliant SBML models into MATLAB \\[~10\n2\ns]**\r\n\n\n5 | Load a COBRA-compliant model into MATLAB. To load a model, navigate within MATLAB to the directory containing the model and call the following function from the command window:\r\n\n\n\r\n\n\n>> model = readCbModel\\(_\\[filename]_);\r\n\n\n\r\n\n\nWhen called with no arguments, readCbModel will prompt the user to select a file using a dialog box. readCbModel supports SBML-formatted \\(Level 2 versions 1 or 4) files. SBML files for a variety of organisms are available from the\nBiGG database\n31\n. The function returns a COBRA Toolbox model structure containing the necessary fields to describe the model for use with subsequent steps. See S\nSupplementary Material\nfor a description of the fields in a COBRA Toolbox model structure; hereafter, model denotes a COBRA Toolbox model structure.\r\n\n\n**CRITICAL STEP\\!** If the model is not properly loaded into MATLAB, none of the following functions will work. Ensure that libSBML and SBML Toolbox are properly installed and accessible by MATLAB and that the SBML file is formatted correctly.\r\n\n\n\r\n\n\n**Saving the model**\r\n\n\n6 | COBRA Toolbox model structures may be saved as text or SBML files. On Microsoft Windows, the structures may also be written to an Excel \\(xls) file.\r\n\n\n\r\n\n\n>> writeCbModel\\(_model, format, \\[fileName], \\[compSymbolList], \\[compNameList], \\[SBMLLevel], \\[SBMLVersion]_);\r\n\n\n\r\n\n\nFor format use 'sbml' for SBML file format or 'xls' for Excel format \\(only available on MS Windows). For filename use the name of the file. If not provided, a dialog box will prompt the user to specify name and location of the output file. This feature is dependent on the SBML Toolbox to generate the XML file. The toolbox is able to output SBML level 2 versions 1 or 4.\r\n\n\n\r\n\n\n**Modify COBRA Toolbox models**\r\n\n\n7 | Once the model is loaded into MATLAB by readCbModel, the model can be modified to simulate different conditions such as altering reaction bonds \\(A), adding \\(B) or removing reactions \\(C) or changing the model objective \\(D).\r\n\n\n\\(A) to alter reaction bounds:\r\n\n\n\r\n\n\n>> model = changeRxnBounds\\(_model, rxnNameList, value, boundType_); \r\n\n\n\r\n\n\nrxnNameList is a cell array of reaction ids corresponding to reaction ids in model.rxns; value is a floating point number; boundType specifies which bounds to change for the reactions and can take values of 'l', 'u', or 'b' for lower, upper, or both, respectively. This function is useful for defining the in silico media composition by changing the lower bounds of exchange reactions.\r\n\n\n\r\n\n\n\\(B) New reactions can be added to a COBRA Toolbox model using the following function:\r\n\n\n\r\n\n\n>> \\[model] = addReaction\\(_model, rxnName, metaboliteList, stoichCoeffList, \\[revFlag], \\[lowerBound], \\[upperBound], \\[objCoeff], \\[subsystem], \\[grRule], \\[geneNameList], \\[systNameList], \\[checkDuplicate]_);\r\n\n\n\r\n\n\nmetaboliteList is a list of metabolites involved in the reaction \\(if a metabolite does not exist in model.mets then this function will add it); \r\n\n\n\r\n\n\nstoichCoeffList is the stoichiometric coefficients for the corresponding elements in metaboliteList. This function checks for reactions with the same name or stoichiometic coefficients, however this can be disabled by setting checkDuplicate to false.\r\n\n\n\r\n\n\n\\(C) To remove a reaction, call the following function: \r\n\n\n\r\n\n\n>> \\[model] = removeRxns\\(_model, rxnRemoveList_)\r\n\n\n\r\n\n\nrxnRemoveList a cell array of reaction ids corresponding to elements in model.rxns. Metabolites that are no longer involved in any reactions are removed from the model. The model may no longer function after reactions have been removed.\r\n\n\n\r\n\n\n\\(D) COBRA modeling often entails performing calculations that focus on a specified objective, such as growth\n59\n. To change the objective function, use the following function:\r\n\n\n\r\n\n\n>> model = changeObjective\\(_model, rxnNameList, \\[objectiveCoeff]_);\r\n\n\n\r\n\n\nrxnNameList is either a string or a cell array of strings containing reaction ids corresponding to elements in model.rxns that should be included in the objective function; objectiveCoeff specifies the weight given to the respective reaction in rxnNameList. If left empty, objectiveCoeff is assumed to be 1.\r\n\n\n\r\n\n\n**Omics-Guided Creation of Context-Specific Models. Timing ~10\n2\ns + >1 hr to format data**\r\n\n\n8 | An emerging application of genome-scale reconstructions is analyzing omics data in a systems context\n14, 25, 26\n. In particular, this procedure is useful for building cell-, tissue-, or condition-specific models. \r\n\n\n\r\n\n\ncreateTissueSpecificModel is designed to map transcriptomic or proteomic data onto a reconstruction using two established algorithms \\(GIMME\n25\nor Shlomi\n26\n). The GIMME algorithm is an LP procedure that best matches high-throughput data to an original flux distribution derived from the full model; thus the algorithm requires a predefined objective function. The Shlomi algorithm is an MILP procedure that best matches high-throughput data to pathway length, thus avoiding the need for a predefined objective function. Novice users can utilize the GIMME algorithm with two inputs: the COBRA model and expression data; while more experienced users can tweak additional parameters.\r\n\n\n\r\n\n\n>> \\[tissueModel,Rxns] = createTissueSpecificModel\\(_model,expressionData, \\[proceedExp],\\[orphan],\\[exRxnRemove],\\[solver],\\[options], \\[funcModel]_);\r\n\n\n\r\n\n\nRequired Inputs: model is a reconstruction with gene-protein-reaction associations; expressionData is a structure that contains two inputs: .Locus \\(a vector of GeneIDs matching gene ids in model.genes), and .Data \\(a vector of presence/absence calls). Optional Inputs: proceedExp \\(default value of 1, to process multiple data sets, set proceedExp to 0); orphan \\(default value of 1) controls whether or not reactions with no known gene-protein-reaction associated are included when peforming Shlomi-based network trimming \\(orphan reactions are always included when the GIMME reaction is employed, regardless of the orphan setting); exRxnRemove is a list of select exchange reactions that are excluded \\(that is if a specific cell or tissue is known not to have a particular metabolite transporter); solver is either 'GIMME' or 'Shlomi' and defaults to 'GIMME'; options is only used with the GIMME algorithm, and it specifies which reactions comprise the objective function \\(by default, the objective function is chosen from model.c with a 90% \\(0.9) threshold); funcModel controls whether the output tissueModel is fully functional \\(every reaction can carry a flux) or not when using the GIMME algorithm. Output: tissueModel is the final cell-, tissue-, or condition-specific model generated from the function; Rxns is a structure containing statistics about what reactions were or were not expressed based on the omics data and what reactions were added or removed from the model \\(see Anticipated Results).\r\n\n\n\r\n\n\n**Visualization Timing ~10\n1\ns**\r\n\n\n9 | Visual representation of a metabolic network can aid in understanding the model. Maps for a variety of metabolic pathways are available for many of the models hosted in the BiGG knowledgebase \\(http://bigg.ucsd.edu). See\nSupplementary Material\nfor a description of the map file format. These maps may be used for other organisms that have similar metabolic pathways, given that the user uses the same metabolite and reaction ids as the BiGG model that was used to create the map. To load a map the following command is used:\r\n\n\n\r\n\n\n>> map = readCbMap\\(_\\[filename]_)\r\n\n\n\r\n\n\nIf readCbMap is called with no arguments, a dialog box will prompt the user to select a map file. After the map has been read into MATLAB, it can be viewed as a MATLAB figure or a scalable vector graphic \\(svg).\r\n\n\n\r\n\n\n10| To view a map as a MATLAB figure the following commands are used \r\n\n\n\r\n\n\n>> changeCbMapOutput\\('matlab')\r\n\n\n>> drawCbMap\\(_map,\\[options],\\[varargin]_)\r\n\n\n\r\n\n\nwhere, options is a map options structure created by setMapOptions. See software documentation for description of optional parameters and ANTICIPATED RESULTS for an example.\r\n\n\n\r\n\n\n11| To save a map as an SVG file the following commands are used: \r\n\n\n\r\n\n\n>> changeCbMapOutput\\('svg');\r\n\n\n>> drawCbMap\\(_map,\\[options],\\[varargin]_) \r\n\n\n\r\n\n\nBy default, drawCbMap will create a file named 'target.svg' in the current working directory. The filename can be set by inputting additional parameters: \r\n\n\n\r\n\n\n>> drawCbMap\\(_map,'FileName',filename_)\r\n\n\n\r\n\n\n**Simulate optimal growth using flux-balance analysis \\(FBA) Timing <10\n2\ns**\r\n\n\n12| Simulating optimal growth using FBA is one of the fundamental COBRA phenotypic calculations for metabolic network models. FBA is a method that calculates the flow of metabolites through a metabolic network\n28\n. Growth is simulated by optimizing the model for flux through the model's biomass function; however, it is also possible to perform simulations that focus on optimizing other biological characteristics, such as ATP production. The reaction to optimize is set using the model.c vector \\(see step 7D).\r\n\n\n\r\n\n\nIn addition to specifying an objective, it is also necessary to define the _in silico_ growth medium; this is accomplished by modifying the bounds of exchange reactions. Exchange reactions for metabolites comprising the _in silico_ growth medium should have a lower bound less than 0; all other exchange reactions should have a lower bound of 0. All exchange reactions should have an upper bound greater than 0 to prevent metabolite build up. The solution returned will have units based on the units used in the model \\(typically mmol\u00b7gDW\n-1\n\u00b7 h\n-1\n). FBA can be performed either in \\(A) standard \\(B) geometric mode:\r\n\n\n\\(A) Standard FBA is performed with:\r\n\n\n \r\n\n\n>> \\[solution] = optimizeCbModel\\(_model, \\[osenseStr], \\[minNorm], \\[allowLoops]_)\r\n\n\n\r\n\n\nwhere: osenseStr is either 'max' or 'min' to maximize or minimize the value of the objective; minNorm \\(default 0, if nonzero, attempt to find a solution that minimizes the presence of loops0; allowLoops \\(default true, if set to false, use the loop law algorithm\n49\nto remove loops\u2014this proceedure can be time consuming). \r\n\n\n\r\n\n\noptimizeCbModel will return a solution structure containing: the objective value 'f', the primal solution 'x', the dual solution 'y', the reduced cost 'w', a universal status flag 'stat', a solver specific status flag 'origStat', and the time to compute the solution 'time'. The primal solution, 'x' represents the flux carried by each reaction within the model. The dual solution, 'y' represents the shadow prices for each metabolite and indicates how much the addition of the corresponding metabolite will increase or decrease the objective value\n28, 60\n. The reduced cost, 'w', indicates how much each reaction affects the objective. A solver status of 1 indicates that an optimal solution was found.\r\n\n\n\r\n\n\n\\(B) Geometric FBA\n44\nis an alternative to standard FBA. Geometric FBA attempts to return the minimal flux distribution central to the bounds of the solution space while still maintaining optimal growth rate. The flux distribution returned should then be reproducible regardless of the solver used.\r\n\n\n\r\n\n\n>> flux = geometricFBA\\(_model,\\[varargin]_) \r\n\n\n\r\n\n\nThe function returns the vector 'flux' which contains the centered optimal flux distribution.\r\n\n\n\r\n\n\n13| Visualizing an Optimal Flux Distribution\r\n\n\nThe optimal flux distribution obtained using optimizeCbModel or geometricFBA can be overlaid onto an existing map of the model using:\r\n\n\n\r\n\n\n>> drawFlux\\(_map, model, flux, \\[options], \\[varargin]_)\r\n\n\n\r\n\n\nwhere: map is a map object created with readCbMap \\(see Visualization Step 9); model is the COBRA model structure that was used for performing FBA or Geometric FBA; options is a drawCbMap options structure.\r\n\n\n\r\n\n\n14| Classification of Model Genes Based on Optimal FBA Solution Parsimonious FBA \\(pFBA) is an FBA approach that incorporates flux parsimony as a constraint to categorize the solution space\n61\n.\r\n\n\n\r\n\n\nThe concept of flux parsimony, in the context of a metabolic network, means to minimize the total material flow required to achieve an objective.\r\n\n\nIn this method, genes are classified into six categories: \\(1) essential genes, metabolic genes necessary for in silico growth in the given media; \\(2) pFBA optima, non-essential genes contributing to the optimal growth rate and minimum gene-associated flux; \\(3) enzymatically less efficient \\(ELE), genes requiring more flux through enzymatic steps than alternative pathways that meet the same predicted growth rate; \\(4) metabolically less efficient \\(MLE), genes requiring a growth rate reduction if used; \\(5) pFBA no-flux, genes that are unable to carry flux in the experimental conditions; and \\(6) Blocked, genes that are only associated with the reactions that cannot carry a flux under any condition \\(\"blocked\" reactions).\r\n\n\n\r\n\n\nTo categorize the genes and reactions within a model and return a model with flux minimization constraints, execute the following:\r\n\n\n\r\n\n\n>> \\[GeneClasses, RxnClasses, modelIrrevFM] = pFBA\\(_model, \\[varargin]_)\r\n\n\n\r\n\n\nWhere, GeneClasses contains a list of all genes that are within the categories above; RxnClasses contains a list of all reactions that are within the categories above; and modelIrrevFM is a model that contains the flux minimization constraints. If a map is available for the model, the results from this function can be visualized by using the 'map' and 'mapoutname' flags in the varargin input. A test case may be found in the ANTICIPATED RESULTS section. Additional options are described in the software documentation directory.\r\n\n\n\r\n\n\n**CRITICAL STEP**\r\n\n\nThe subsequent steps in this protocol rely on the functionality of optimizeCbModel. If optimizeCbModel fails to return a feasible flux distribution for the examples within this protocol, the problem may be due to the installation of the LP solver. It is not necessary that geometricFBA return a solution for the subsequent steps.\r\n\n\n\r\n\n\n**Solving COBRA problem structures \\(Advanced User) Timing >10 s**\r\n\n\n15 | The COBRA toolbox has five function calls used for solving different optimization problems. Basic users will not need to call these low level functions directly as higher level functions encapsulate these calls. These functions act as a common interface for different LP, MILP, QP, MIQP, and NLP solvers ensuring that labs can share code even when using different installed solvers.\r\n\n\nThe five solver functions use a similar input argument structure: problem structure followed by optional argument/value pairs. The required fields in the problem structure vary for each function to supply the required information to solve the type of problem. For example, the mixed integer problem structures require a field which specifies variable type \\(continuous, integer, binary). A description on the format of COBRA problem structures can be found in Supplementary Material. The COBRA solution structure also provides a common output format regardless of the solver used.\r\n\n\n\r\n\n\n>> \\[solution] = solveCobraLP\\(_LPproblem, \\[varargin]_) \r\n\n\n>> \\[solution] = solveCobraMILP\\(_MILPproblem, \\[varargin]_) \r\n\n\n>> \\[solution] = solveCobraQP\\(_QPproblem, \\[varargin]_) \r\n\n\n>> \\[solution] = solveCobraMIQP\\(_MIQPproblem, \\[varargin]_) \r\n\n\n>> \\[solution] = solveCobraNLP\\(_NLPproblem, \\[varargin]_)\r\n\n\n\r\n\n\n**Simulating deletion studies Timing ~10\n2\n-10\n4\ns**\r\n\n\n16 | Deletion studies can be easily simulated with _in silico_ models. Gene deletion methods within the Toolbox are dependent on the proper setup of the gene-reaction matrix as well as the rules defining the Boolean relationship between genes and reactions. Reactions that are affected by a gene deletion have their upper and lower flux bounds set to zero and are therefore not functional. The set of reactions on which a gene deletion has an effect is calculated using the gene reaction association and rules.\r\n\n\n\r\n\n\nIt is possible to study either \\(A) single essential gene deletions or \\(B) pairs of synthetic lethal genes. The possible results from deletion studies are: 1) unchanged maximal growth, 2) reduced maximal growth, or 3) no growth \\(lethal). Deletion studies can be used to predict gene/reaction essentiality.\r\n\n\n\r\n\n\n\\(A) Essential Gene Study\r\n\n\n\r\n\n\n>> \\[grRatio, grRateKO, grRateWT, hasEffect, delRxns, fluxSolution] = singleGeneDeletion\\(_model, method, \\[geneList]_) \r\n\n\n\r\n\n\nwhere: method can be either 'FBA' \\(default) 'MOMA'\n62\nor linear MOMA \\('lMOMA'); geneList, is a cell array of genes corresponding to model.genes \\(if not provided deletion simulations are performed for all genes in the model); grRatio is the growth rate of the knockout / growth rate of WT; grRateKO is the growth rate of the knockouts; grRateWT is the wild-type growth rate; hasEffect is a Boolean list that contains true for each gene whose deletion alters the growth rate; delRxns contains a list of the reactions, the bounds of which are set to 0 for each gene deletion; and fluxSolution is the flux solution for each deletion.\r\n\n\n\r\n\n\n\\(B) Synthetic Lethal Study\r\n\n\n\r\n\n\n>> \\[grRatioDble, grRateKO, grRateWT] = doubleGeneDeletion\\(_model, method, \\[geneList1], \\[geneList2]_)\r\n\n\n\r\n\n\nwhere: method can be either 'FBA' \\(default) 'MOMA'\n62\nor linear MOMA \\('lMOMA'); geneList1 is a cell array of genes corresponding to model.genes \\(if not provided, the function assumes all genes in model.genes are to be interrogated); geneList2 is a cell array of genes that correspond to the second set of genes in the synthetic lethal pair \\(if not provided, the function assumes that all genes in model.genes are to be interrogated); grRatioDble is the growth rate of the knockout / growth rate of WT; grRateKO is the growth rate of the knockouts; and grRateWT is the wild-type growth rate.\r\n\n\n\r\n\n\n**Flux Variability Analysis \\(FVA) Timing ~10\n2\ns**\r\n\n\n17 | FBA only returns a single flux distribution that corresponds to maximal growth under given growth conditions. However, alternate optimal solutions may exist which correspond to maximal growth. FVA calculates the full range of numerical values for each reaction flux within the network\n63\n.\r\n\n\nTo determine the minimum and maximum flux values that the reactions within the model can carry while obtaining a specific percentage of optimal growth rate:\r\n\n\n\r\n\n\n>> \\[minFlux maxFlux] = fluxVariability\\(_model, optPercentage, \\[rxnNameList], \\[verbFlag], \\[allowLoops]_)\r\n\n\n\r\n\n\nwhere optPercentage \\(default 100) specifies the percentage of optimal that an alternate flux distribution must realize to be considered an acceptable alternative flux distribution.\r\n\n\n\r\n\n\n**Visualization of Flux Variability Analysis Results**\r\n\n\n18| To visualize the results from this function, a flux variability map can be generated from an existing reaction map, color coding reactions based on flux directionality.\r\n\n\n\r\n\n\n>> drawFluxVariability\\(_map, model, minFlux, maxFlux, \\[options]_)\r\n\n\n\r\n\n\nwhere: map is the map structure corresponding to the model read in using readCbMap; model is the COBRA model structure used in the fluxVariability function; minFlux and maxFlux are vectors generated by the fluxVariability function described above; and options is a structure containing optional parameters such as edge and node color and size: bi-directional reversible reactions are colored green, unidirectional reversible reactions that carry flux in the forward direction are colored magenta, unidirectional reversible reactions that carry flux only in the reverse direction are colored cyan, and irreversible fluxes are colored blue.\r\n\n\n\r\n\n\n**Sampling the solution space \\[>10\n2\ns] \\(Advanced User)**\r\n\n\n19| FBA only returns a single optimal point and thus gives little information about the entire solution space. An alternative approach is to characterize the solution space using sampling\n27\n. The generalized parallel sampler samples any arbitrary linearly- constrained space by moving a fixed number of points in parallel.\r\n\n\n\r\n\n\n>> \\[sampleStructOut, mixedFrac] = gpSampler\\(_sampleStruct, \\[nPoints], \\[bias], \\[maxTime], \\[maxSteps]_)\r\n\n\n\r\n\n\nwhere: sampleStruct is the COBRA Toolbox problem structure for linear programming problems \\(see Supplementary Information); nPoints is the number of sample points is set through; maxTime is the maximum sampling time; bias is a structure that imposes marginal distributions on reactions; sampleStructOut is sampleStruct with the addition of the 'points' field containing the solutions; and mixedFrac gives an estimate of how mixed the sampling solution is relative to the warmup points\u2014a mixedFrac value of 0.5 indicates complete mixing.\r\n\n\n\r\n\n\n*Fluxomics \\(Advanced User)\r\n\n\nTiming >10\n2\ns*\r\n\n\n20 | Carbon 13 tracing experiments provide the ability to measure internal flux rates in a metabolic network\n64\n. To use this data, additional information about carbon tracking must be added to the COBRA model. This is stored in the .isotopomer field as described in\nSupplementary Information Section S.3\n. In order to use the\n13\nC solver, the functions must be generated:\r\n\n\n\r\n\n\n>> \\[experiment] = generateIsotopomerSolver\\(_model, inputMet, \\[experiment], \\[FVAflag]_)\r\n\n\n\r\n\n\nwhere: model is the COBRA model with an .isotopomer field; inputMet is a string corresponding to the\n13\nC labeled input; experiment is a list of metabolites that must be measured; and FVAflag removes reactions that cannot carry a flux.\r\n\n\n\r\n\n\n21| Two solvers are generated, one based on the cumomer method\n65\nand one on the faster EMU method\n66\n. The solvers are called internally during the scoreC13Fit function below. A given flux distribution can be scored against a set of\n13\nC data:\r\n\n\n\r\n\n\n>> output = scoreC13Fit\\(_v0,expdata,model_) \r\n\n\n\r\n\n\nwhere: vo is the initial guess for fitting; and expdata is one or more sets of experimental data described in\nSupplementary Information Section S.3\n.\r\n\n\n\r\n\n\n22| Next, the most optimal flux distribution can be found with a non-linear optimization as such:\r\n\n\n\r\n\n\n>> \\[vout] = fitC13Data\\(_v0,expdata,model, \\[majorIterationLimit]_)\r\n\n\n\r\n\n\nThis function will return the flux with the lowest experimental score found by the NLP solver. Very often it is useful to compute the confidence intervals of reactions which are consistent with\n13\nC data.\r\n\n\n\r\n\n\n>> \\[vs, output, v0] = C13ConfidenceInterval\\(_v0, expdata, model, max_score, \\[directions], \\[majorIterationLimit]_); \\(~10\n2\ns) \r\n\n\n\r\n\n\nwhere: v0 is the initial guess; expdata is the experimental data that must be fit; max_score is the highest acceptable score; and directions is the list of reactions and reaction ratios which will be maximized and minimized \\(by default all reactions).\r\n\n\n\r\n\n\n**Gap Filling \\[~10\n3\ns]**\r\n\n\n23 | Due to incomplete knowledge, a metabolic model may possess gaps. A gap is defined as missing biochemical information which can explain discrepancies between model predictions and experimental data. Gaps are typically reactions that facilitate the conversion of an available metabolite in the model to one necessary to achieve an objective. Identifying gaps in metabolic models can be attempted using either \\(A) detectDeadEnds or \\(B) gapFind.\r\n\n\n\r\n\n\n\\(A) Detect Dead Ends in a Model\r\n\n\n\r\n\n\n>> outputMets = detectDeadEnds\\(_model,\\[removeExternalMets]_)\r\n\n\n\r\n\n\nThe detectDeadEnds function searches the model.S matrix for metabolites that participate in only one reaction \\(can only be produced or only be consumed) and returns the corresponding indices for the metabolites in the model.mets field. Setting removeExternalMets to true removes external metabolites from the results. Not all gaps can be identified by simply inspecting the model.S matrix.\r\n\n\n\r\n\n\n\\(B) Find All Gaps in a Model\r\n\n\n\r\n\n\nThe GapFind algorithm\n45\nallows one to find all gaps in a model and all metabolites that are downstream from a model gap.\r\n\n\n\r\n\n\n>> \\[allGaps, rootGaps, downstreamGaps] = gapFind\\(_model, findNCgaps, verbFlag_)\r\n\n\n\r\n\n\nwhere: allGaps is a list of the metabolite indices for a metabolite at a gap; rootGaps is a list of metabolites that cannot be produced; and downstreamGaps is a list of metabolites that are produced in a reaction that requires a metabolite that cannot be produced.\r\n\n\n\r\n\n\nThis function is run in an interactive and iterative fashion to guarantee that all gaps are identified. Set the lower bound of all exchange reactions within model to -1, the upper bound on all reactions to a relatively large positive number \\(for example 10\n5\n), and the lower bound of all reversible reactions to a relatively large negative number \\(for example -10\n5\n) within model. The appropriate bound magnitude required varies from model to model. If the bound magnitudes are too small, the algorithm will incorrectly identify many metabolites as gaps; if this occurs, increase the bound magnitudes by 10-fold. Repeat this process as necessary until the algorithm does not identify all metabolites as gaps.\r\n\n\n\r\n\n\n24| In addition to these two gap identification functions, the Toolbox includes an optimization-based algorithm \\(growthExpMatch) that identifies candidate reactions to fill gaps in the model\n53\n. growthExpMatch identifies the minimum number of reactions from a universal reaction database that are required for a metabolic model to grow on a specified substrate.\r\n\n\n\r\n\n\n>> \\[solution] = growthExpMatch\\(_model, KEGGFilename, compartment, iterations, dictionary, logFile, threshold_)\r\n\n\n\r\n\n\nwhere: KEGGFilename is the name of the reaction .lst file downloaded from\nKEGG\n67, 68\n; compartment is a string denoting which compartment to generate exchange reactions for; iterations controls the number iterations to run the function; dictionary is an n by 2 cell array that maps metabolites to KEGG IDs; logFile is the name of the .mat file to save the solution to; and threshold is the minimum value that the biomass function can take for the model to be considered growing.\r\n\n\n\r\n\n\n25| Display the growthExpMatch solution by printing the log file using the following function:\r\n\n\n\r\n\n\n>> printSolutionGEM\\(_dir, matFile_)\r\n\n\n\r\n\n\nwhere: dir is the directory containing the growthExpMatch solution .mat file; and matFile is the name of the growthExpMatch solution .mat file.\r\n\n\n\r\n\n\n**Metabolic Engineering Timing ~10\n2\n-10\n3\ns**\r\n\n\n25 | The COBRA Toolbox version 2.0 provides three methods for in silico metabolic engineering: \\(A) OptKnock46, \\(B) OptGene47, and \\(C) GDLS48.\r\n\n\n\r\n\n\n\\(A) OptKnock\r\n\n\nOptKnock runs the OptKnock algorithm\n46\nto determine reaction sets to knock out for the overproduction of a specific product when the model is optimized for internal cellular objectives.\r\n\n\n\r\n\n\n>> \\[OptKnockSol, biLevelMILPproblem] = OptKnock\\(_model, selectedRxnList, \\[options], \\[constrOpt], \\[prevSolutions], \\[verbFlag]_)\r\n\n\n\r\n\n\nwhere: OptKnockSol contains the best knockout set; and biLevelMILPproblem is the MILP problem generated by the algorithm and subsequently solved. See ANTICIPATED RESULTS for an example setup of options and constrOpt structures.\r\n\n\nThere are several things to take note of when calling the OptKnock function. First the function does not use the upper and lower bounds set within the model that is passed in. The model is first converted into irreversible format, splitting reactions with a lower bound < 0 and upper bound > 0. The resulting set of reactions has its lower bounds set to 0 and upper bounds set to options.vMax. Use the constrOpt structure to apply constraints on reactions, such as a minimal flux through the biomass function or ATP maintenance. Failure to set the proper constraints may lead to incorrect predictions generated by the function.\r\n\n\n\r\n\n\n\\(B) OptGene\r\n\n\nOptGene is an evolutionary programming-based method to determine gene knockout strategies for overproduction of a specific product\n47\n. It can handle non-linear objective functions such as product flux multiplied by biomass.\r\n\n\n\r\n\n\n>> \\[x, population, scores, optGeneSol] = OptGene\\(_model, targetRxn, substrateRxn, generxnList, maxKOs, \\[population]_)\r\n\n\n\r\n\n\nwhere: targetRxn specifies the reaction to optimize; substrateRxn specifies the exchange reaction for the growth; generxnList is a cell array of strings that specifies which genes or reactions are allowed to be deleted; and maxKOs sets the maximum number of knockouts; x is the best scoring set as determined by the functions optGeneFitness or optGeneFitnessTilt; population is the binary matrix representing the knockout sets; and optGeneSol is the structure summarizing the results. If resuming a previous simulation, the binary matrix \\(population) can be specified.\r\n\n\n\r\n\n\n\\(C) Genetic Design Local Search\r\n\n\nThe Genetic Design Local Search \\(GDLS) algorithm\n48\nmay be used to identify what to knock out to increase _in silico_ production of desired metabolites\r\n\n\n\r\n\n\n>> \\[gdlsSolution, biLevelMILPproblem, gdlsSolutionStructs] = GDLS\\(_model, targetRxns, \\[vargin]_)\r\n\n\n\r\n\n\nwhere: targetRxns is a specific list of genes, gene sets, or reactions to knock; gdlsSolution is the knockout solution; biLevelMILPproblem is the bi-level MILP problem for the solution; and gdlsSolutionStructs containes the intermediate solutions. This approach typically runs faster than the global search performed by OptKnock, however, it is not guaranteed to identify the global optima."
        },
        {
            "header": "Timing",
            "content": "Run COBRA Toolbox test suite \\[~10<sup>3</sup> s]\r\n\n\n\r\n\n\nRead COBRA-compliant SBML models into MATLAB \\[~10<sup>2</sup> s]\r\n\n\n\r\n\n\nOmics-Guided Creation of Context-Specific Models \\[~10<sup>2</sup> s + >1 hr to format data]\r\n\n\n\r\n\n\nVisualization \\[~10 s]\r\n\n\n\r\n\n\nSimulate optimal growth using flux-balance analysis \\(FBA) \\[<10<sup>2</sup> s]\r\n\n\n\r\n\n\nSolving COBRA problem structures \\[>10<sup>0</sup> s]\r\n\n\n\r\n\n\nSimulating deletion studies \\[~10<sup>2</sup>-10<sup>4</sup> s]\r\n\n\n\r\n\n\nFlux Variability Analysis \\(FVA) \\[~10<sup>2</sup> s]\r\n\n\n\r\n\n\nSampling the solution space \\[>10<sup>2</sup> s]\r\n\n\n\r\n\n\nFluxomics \\[>10<sup>2</sup> s]\r\n\n\n\r\n\n\nGap Filling \\[~10<sup>3</sup> s]\r\n\n\n\r\n\n\nMetabolic Engineering \\[~10<sup>2</sup>-10<sup>3</sup> s]"
        },
        {
            "header": "Troubleshooting",
            "content": "Troubleshooting for several steps in the protocol is available \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1804/original/Table_2.pdf>Table 2</a>).  If your problem is not addressed seek assistance at <a href=http://opencobra.sourceforge.net> The openCOBRA Project</a>. See also: testAll\\()."
        },
        {
            "header": "Anticipated Results",
            "content": "Here, we provide examples of Toolbox functionality that is commonly used for our research or by external collaborators. For the most part, the default settings for the functions will suffice. Advanced users interested in additional features of the COBRA Toolbox should explore the Documentation in the COBRA Toolbox as well as the mailing list: http://groups.google.com/group/cobra-toolbox/\r\n\n\n\r\n\n\n**Displaying and saving metabolic maps**\r\n\n\nThe format for a metabolic map coordinate file is described in <a href=http://www.nature.com/protocolexchange/system/uploads/1808/original/Supplementary_Material.pdf>Supplementary\r\n\n\ninformation</a>. Maps are available for download from the <a href=http://bigg.ucsd.edu>BiGG database</a>.\r\n\n\n\r\n\n\n**Load a map coordinate file**\r\n\n\nNavigate to the directory \\(testing/testMaps) containing the map file 'ecoli_core_map.txt' and then execute the following commands:\r\n\n\n\r\n\n\n>> map = readCbMap\\('ecoli_core_map.txt');\r\n\n\n\r\n\n\n**Display a metabolic map**\r\n\n\n>> changeCbMapOutput\\('matlab');\r\n\n\n >> drawCbMap\\(map);\r\n\n\n\r\n\n\nThe following example illustrates one of the many ways to change the appearance of a map. Colors are based on the RGB style. To change all of the nodes to black and the edges to red: First, we create an n x 3 matrix where n is the number of nodes in the map and each row is the RGB for black \\(\\[0,0,0]).\r\n\n\n\r\n\n\n>> node_colors = repmat\\(\\[0,0,0],size\\(map.molName,1),1);\r\n\n\n\r\n\n\nNext, we create an n x 3 matrix where n is the number of edges in the map and each row is the RGB for red \\(\\[1,0,0]).\r\n\n\n\r\n\n\n>> edge_colors = repmat\\(\\[1,0,0],size\\(map.connectionName,1),1);\r\n\n\n\r\n\n\nThe we create a map options structure. The first argument is either an empty matrix or a previously created map options structure.\r\n\n\n\r\n\n\n>> options = setMapOptions\\(\\[], map, 'nodeColor', node_colors, 'edgeColor', edge_colors);\r\n\n\n\r\n\n\n>> drawCbMap\\(map, options);\r\n\n\n\r\n\n\n**Save a metabolic map**\r\n\n\n>> changeCbMapOutput\\('svg') \r\n\n\n>> drawCbMap\\(map);\r\n\n\n\r\n\n\nThe file 'target.svg' will be saved in the working directory.\r\n\n\n\r\n\n\n**Optimal flux distributions and growth rates for E. coli core model** \r\n\n\nTo read in the E. coli core model and predict a flux distribution for optimal growth, navigate to the directory \\(testing/testMaps) containing the E. coli core model and map file and execute the following functions:\r\n\n\n\r\n\n\n>> model = readCbModel\\('ecoli_core_model.xml'); >> map = readCbMap\\('ecoli_core_map.txt');\r\n\n\n>> changeCbMapOutput\\('svg'); \r\n\n\n>> solution = optimizeCbModel\\(model);\r\n\n\n\r\n\n\nThe expected optimal biomass flux \\(solution.f) is ~0.87.\r\n\n\n\r\n\n\n >> drawFlux\\(map, model, solution.x, \\[], 'FileName', 'EcoreOptFlux1.svg');\r\n\n\n\r\n\n\nThe drawFlux function call generates an svg file named EcoreOptFlux1.svg in the working directory. The reactions are color coded using a linear scale from cyan \\(corresponding to a flux of -29.17) to magenta \\(corresponding to a flux of 45.51).\r\n\n\n\r\n\n\nTo more easily extract data from the map, change the width of reactions arrows corresponding to reactions carrying zero flux to 1 point. In addition, set the lower and upper bounds to -15 and 15 respectively.\r\n\n\n\r\n\n\n>> drawFlux\\(map, model, solution.x, \\[], 'ZeroFluxWidth', 1, 'lb', -15, 'ub', 15, 'FileName', 'EcoreOptFlux2.svg');\r\n\n\n\r\n\n\nAn svg file named EcoreOptFlux2.svg should be saved in the working directory with reactions color coded from cyan \\(flux of -15 or less) to magenta \\(flux of 15 or greater) and reactions carrying zero flux have their corresponding arrows narrowed \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1800/original/Figure_3.pdf>Figure 3</a>).\r\n\n\n\r\n\n\n**Parsimonious FBA \\(pFBA) Categorization of Genes for E. coli growth on acetate**\r\n\n\nTo perform pFBA on the E. coli core model growing in an acetate minimal medium and plot the results, navigate to the directory \\(testing/testMaps) containing the E. coli core model and execute the following commands.\r\n\n\n\r\n\n\n>> map = readCbMap\\('ecoli_core_map.txt'); \r\n\n\n>> model = readCbModel\\('ecoli_core_model.xml');\r\n\n\n\r\n\n\nRemove glucose from the minimal medium. \r\n\n\n\r\n\n\n>> model = changeRxnBounds\\(model,'EX_glc\\(e)',0,'l');\r\n\n\n\r\n\n\nAdd acetate to the minimal medium.\r\n\n\n\r\n\n\n>> model = changeRxnBounds\\(model,'EX_ac\\(e)',-10,'l');\r\n\n\n>> \\[pFBAGeneClasses pFBARxn] = pFBA\\(model, 'map', map, 'mapOutName', 'Ecore_pFBA_ac.svg');\r\n\n\n\r\n\n\nA reaction map with reactions color coded according to the reaction class will be saved as 'Ecore_pFBA_ac.svg' in the working directory. Inspecting the map will show that pyruvate kinase \\(PYK) is classified by pFBA as enzymatically less efficient \\(ELE). This is because its use does not reduce the computed growth rate, but it increases the amount a flux through the network. Interestingly, it has been reported that this enzyme is down-regulated in wild-type E. coli when grown on acetate minimal media<sup>69</sup>. Simulation time was ~20 s with the Gurobi LP solver.\r\n\n\n\r\n\n\n**Flux Variability Analysis \\(FVA) of E. coli core model**\r\n\n\nTo perform FVA for the E. coli core model under glucose limited aerobic growth\r\n\n\nconditions with a minimum cellular growth of 90% of optimal, navigate to the directory \\(testing/testMaps) containing the E. coli core model and execute the following commands.\r\n\n\n\r\n\n\n>> model = readCbModel\\('ecoli_core_model.xml'); >> \\[minFlux maxFlux] = fluxVariability\\(model,90);\r\n\n\n\r\n\n\nSimulation time is approximately 2 s with the Gurobi LP solver.\r\n\n\n\r\n\n\n>> map = readCbMap\\('ecoli_core_map.txt'); \r\n\n\n>> changeCbMapOutput\\('svg'); \r\n\n\n>> drawFluxVariability\\(map, model,minFlux, maxFlux, \\[],'fileName', 'EcoreFluxVariability.svg');\r\n\n\n\r\n\n\nA reaction map with reactions color coded according to the flux directionality it can carry will be saved to the file 'EcoreFluxVariability.svg' in the current working directory \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1801/original/Figure_4.pdf>Figure 4</a>). Bi-directional reversible reactions are colored green. Unidirectional reversible reactions which carry flux in the forward direction are colored magenta. Unidirectional reversible reactions which carry flux only in the reverse direction are colored cyan. Irreversible fluxes are colored blue. Unidirectional fluxes have enlarged arrowheads in the direction of the flux.\r\n\n\n\r\n\n\n**Sampling of the solution space of E. coli core model for growth in aerobic versus anaerobic conditions**\r\n\n\nTo read in the E. coli core model and sample its solution space under glucose minimal media and aerobic conditions with 200 points for 2 minutes, navigate to the directory \\(testing/testMaps) containing the E. coli core model and execute the following commands:\r\n\n\n\r\n\n\n>> model_aerobic = readCbModel\\('ecoli_core_model.xml'); \r\n\n\n>> sampleStruct_aerobic = gpSampler\\(model_aerobic,200,\\[],120);\r\n\n\n\r\n\n\nSimulation time of ~120 seconds with the Gurobi LP solver.\r\n\n\n\r\n\n\n>> model_anaerobic = changeRxnBounds\\(model_aerobic,'EX_o2\\(e)',0,'l'); >> sampleStruct_anaerobic = gpSampler\\(model_anaerobic,200,\\[],120);\r\n\n\n\r\n\n\nSimulation time of ~120 seconds with the Gurobi LP solver. Sampling results will be returned in the two structures sampleStruct_aerobic and sampleStruct_anaerobic within the field points.\r\n\n\n\r\n\n\n**Visualize Sampling Results for a Set of Reactions**\r\n\n\n>> rxnList = \\{'PGI', 'PFK', 'FBP', 'FBA', 'TPI', 'GAPD', 'PGK', 'PGM', 'ENO', 'PYK'}; \r\n\n\n>> plotSampleHist\\(rxnList, \\{sampleStruct_aerobic.points,\r\n\n\nsampleStruct_anaerobic.points }, \\{model_aerobic, model_anaerobic},\\[],\\[2,5]); \r\n\n\n\r\n\n\nA MATLAB figure will also be generated showing the histograms for glycolysis with aerobic in blue and anaerobic in green \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1802/original/Figure_5.pdf>Figure 5</a>).\r\n\n\n\r\n\n\n**Identifying gaps in the metabolic network**\r\n\n\nTo find gaps in the Ec_iJR904 model using the gapFind function, navigate to the directory \\(testing/testReadWrite) containing the Ec_iJR904.xml and execute the following commands:\r\n\n\n\r\n\n\n>> model = readCbModel\\('Ec_iJR904.xml'); \r\n\n\n>> exchangeRxns = model.rxns\\(findExcRxns\\(model));\r\n\n\n\r\n\n\nSet the lower bound for all reversible reactions to -1 x 10<sup>6</sup>.\r\n\n\n>> model = changeRxnBounds\\(model, model.rxns\\(logical\\(model.rev)), -1e6, 'l'); \r\n\n\n\r\n\n\nSet the upper bound for all reactions to 1 x 10<sup>6</sup>.\r\n\n\n>> model = changeRxnBounds\\(model, model.rxns, 1e6, 'u'); \r\n\n\n\r\n\n\nSet lower bound for all exchange reactions to -1 to allow for uptake.\r\n\n\n>> model = changeRxnBounds\\(model, exchangeRxns, -1, 'l'); \r\n\n\n\r\n\n\n>> \\[allGaps, rootGaps, downstreamGaps] = gapFind\\(model);\r\n\n\n\r\n\n\nUsing the Gurobi MILP solver \\(simulation time 1.5 s), there are 64 metabolites identified as gaps: 28 root gaps and 36 downstream gaps; using the GLPK solver, only 20 of the 36 downstream gaps are identified.\r\n\n\n\r\n\n\n**Filling gaps using growthExpMatch**\r\n\n\nRemove the PGK reaction from the E. coli core model and use growthExpMatch to propose candidate reactions required to allow growth on glucose. Navigate to the directory \\(testing/testGrowthExpMatch) containing the E. coli core model and the univesal reaction database and execute the following commands:\r\n\n\n\r\n\n\n>> model = readCbModel\\('ecoli_core_model.xml'); >> modelKO = removeRxns\\(model,\\{'PGK'}); \r\n\n\n>> KEGGFilename = '2010_07_30_KEGG_reaction.lst'; \r\n\n\n>> load\\('Dictionary.mat'); \r\n\n\n>> growthExpMatch\\(modelKO, KEGGFilename, '\\[c]', 5, dictionary,'GEMLog.txt');\r\n\n\n\r\n\n\nThe PGK reaction is removed from the E. coli core model, removing the ability of the model to produce biomass from glucose. Updated versions of the KEGG reaction list should be downloaded from the <a href=http://www.genome.jp/kegg>KEGG website</a><sup>67, 68</sup>. The resulting GEMLog file should contain 5 solutions \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1805/original/Table_3.pdf?1304792502>Table 3</a>)\u2014note, that if no solutions are found then the log file will not be generated. The first solution R01512 corresponds to the PGK reaction which was removed previously. The remaining four solutions are alternate reaction sets that when added allow the model to grow on glucose. With the Gurobi MILP solver, simulation time was ~2\u00d710<sup>3</sup> seconds.\r\n\n\n\r\n\n\n**Optimize product secretion using the E. coli core model**\r\n\n\nTo set up model for strain design navigate to the directory \\(testing/testMaps) containing the E. coli core model and execute the following commands.\r\n\n\n\r\n\n\n>> model = readCbModel\\('ecoli_core_model.xml');\r\n\n\n\r\n\n\nAdjust the minimal medium composition to be anaerobic and contain a supply of glucose \\(20 mmol \u00b7 gDW<sup>-1</sup> \u00b7 h<sup>-1</sup>).\r\n\n\n\r\n\n\n>> model = changeRxnBounds\\(model, \\{'EX_o2\\(e)', 'EX_glc\\(e)'}, \\[0 -20], 'l');\r\n\n\n\r\n\n\nBuild a list of candidate reactions for deletion to optimize product formation. It is wise to exclude exchange and transport reactions, and biomass and ATP maintenance requirements.\r\n\n\n\r\n\n\n>> selectedRxns = \\{model.rxns\\{ \\[1, 3:5, 7:8, 10, 12, 15:16, 18, 40:41, 44, 46, 48:49, 51, 53:55, 57, 59:62, 64:68, 71:77, 79:83, 85:86, 89:95]}};\r\n\n\n\r\n\n\n**Optknock Analysis of Model**\r\n\n\nTo optimize for lactate secreation with 5 deletions or less using the optKnock method:\r\n\n\n\r\n\n\n>> options.targetRxn = 'EX_lac-D\\(e)'; \r\n\n\n>> options.vMax = 1000; \r\n\n\n>> options.numDel = 5; \r\n\n\n>> options.numDelSense = 'L';\r\n\n\n>> constrOpt.rxnList = \\{'Biomass_Ecoli_core_N\\(w/GAM)-Nmet2', 'ATPM'}; >> constrOpt.values = \\[0.05, 8.39]; \r\n\n\n>> constrOpt.sense = 'GE'; \r\n\n\n>> optKnockSol = OptKnock\\(model, selectedRxns, options, constrOpt);\r\n\n\n\r\n\n\nThe resulting knockout list \\(optKnockSol.rxnList) is alcohol dehydrogenase, fumarase, glutamate dehydrogenase, malic enzyme \\(NADP), pyruvate kinase \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1807/original/Table_4.pdf>Table 4</a>). The resulting knockout predicted growth rate of <sub>0.142 and product excretion rate of </sub>37.7. The computational time required for this simulation was ~4 seconds with the Gurobi MILP solver.\r\n\n\n\r\n\n\n**Strain Design using GDLS**\r\n\n\nExecute the following commands to optimize for the lactate secretion using the GDLS algorithm.\r\n\n\n\r\n\n\n>> \\[gdlsSolution, bilevelMILPproblem, gdlsSolutionStructs] = GDLS\\(model, 'EX_lac-D\\(e)', 'minGrowth', 0.05, 'selectedRxns', selectedRxns, 'maxKO', 5, 'nbhdsz', 3);\r\n\n\n\r\n\n\nThe resulting knockout list \\(gdlsSolution.KOs) is acetaldehyde dehydrogenase, fumarate reductase, glutamate dehydrogenase, phosphotransacetylase, and NAD\\(P) transhydrogenase \\(<a href=http://www.nature.com/protocolexchange/system/uploads/1807/original/Table_4.pdf>Table 4</a>). The resulting knockout predicted growth rate of <sub>0.14 and product excretion rate of </sub>37.7. The computational time required for this simulation was ~2 seconds with the Gurobi LP solver.\r\n\n\nBoth methods were also used to optimize for succinate product with a maximum of 5 knockouts and pyruvate with a maximum of 3 knockouts. For succinate and pyruvate, the list of reactions to knock out was the same for both OptKnock and GDLS, however, two reactions were different when the target product was lactate \\(<http://www.nature.com/protocolexchange/system/uploads/1807/original/Table_4.pdf>Table 4</a>). For lactate, OptKnock chose alcohol dehydrogenase and fumarase, while GDLS chose acetaldehyde dehydrogenase, fumarate reductase. However, both result in the same optimal flux distribution.\r\n\n\n\r\n\n\n**Build a Draft Tissue-Specific Human Macrophage Model from the Global Human Metabolic Network and Omics Data**\r\n\n\nNavigate to testing/testTissueModel. To save time, we have provided a MAT file \\(testTissueModel.mat) that contains the global human metabolic network model and a formatted expressionData structure. The model is the version of the human metabolic network reconstruction<sup>70</sup> that was used to create an alveolar macrophage model<sup>14</sup> using expression data from Kazeros et al.<sup>71</sup>\r\n\n\n\r\n\n\n>> load\\('testTissueModel.mat')\r\n\n\n\r\n\n\n**Build a Draft Model with GIMME**\r\n\n\nThe GIMME algorithm retains reactions from Recon 1 that are orphans or are present in the high-throughput data. The reactions with no detected expression are minimized and those not required to retain flux through the objective reaction are removed.\r\n\n\n\r\n\n\n>> \\[tissueModel,Rxns] = createTissueSpecificModel\\(model,expressionData); \r\n\n\n\r\n\n\nWhere: tissueModel is the GIMME algorithm-derived draft model; and Rxns is a structure with lists of all the reactions. The reactions fall into the following categories: Expressed - 1769 potentially active reactions based on transcriptome data; UnExpressed - 497 reactions without requisite gene products based on transcriptome data; unknown - 41 reactions unable to be predicted by transcriptome data; Upregulated - 52 UnExpressed reactions added back into model; Downregulated - 0 Expressed reactions removed from model ; and UnknownIncluded - 1476 orphan reactions included. The calculations should take ~50 seconds with Gurobi LP solver for GIMME."
        },
        {
            "header": "References",
            "content": "1. Feist, A.M. et al. Model-driven evaluation of the production potential for growth-coupled products of Escherichia coli. Metab Eng 12, 173-86 \\(2010).\r\n  2. Feist, A.M. & Palsson, B.O. The growing scope of applications of genome-scale metabolic reconstructions using Escherichia coli. Nat Biotechnol 26, 659-67 \\(2008).\r\n  3. Oberhardt, M.A., Palsson, B.O. & Papin, J.A. Applications of genome-scale metabolic reconstructions. Mol Syst Biol 5, 320 \\(2009).\r\n  4. Covert, M.W., Knight, E.M., Reed, J.L., Herrgard, M.J. & Palsson, B.O. Integrating high- throughput and computational data elucidates bacterial networks. Nature 429, 92-96 \\(2004).\r\n  5. Gianchandani, E.P., Joyce, A.R., Palsson, B.O. & Papin, J.A. Functional states of the genome-scale Escherichia coli transcriptional regulatory system. PLoS Comput Biol 5, e1000403 \\(2009).\r\n  6. Brynildsen, M.P., Wong, W.W. & Liao, J.C. Transcriptional regulation and metabolism. Biochem. Soc. Trans. 33, 1423-1426 \\(2005).\r\n  7. Thiele, I., Fleming, R.M., Bordbar, A., Schellenberger, J. & Palsson, B.O. Functional characterization of alternate optimal solutions of Escherichia coli's transcriptional and translational machinery. Biophys J 98, 2072-81 \\(2010).\r\n  8. Thiele, I., Jamshidi, N., Fleming, R.M. & Palsson, B.O. Genome-scale reconstruction of Escherichia coli's transcriptional and translational machinery: a knowledge base, its mathematical formulation, and its functional characterization. PLoS Comput Biol 5, e1000312 \\(2009).\r\n  9. Papin, J.A., Hunter, T., Palsson, B.O. & Subramaniam, S. Reconstruction of cellular signalling networks and analysis of their properties. Nat Rev Mol Cell Biol 6, 99-111 \\(2005).\r\n  10. Li, F., Thiele, I., Jamshidi, N. & Palsson, B.O. Identification of potential pathway mediation targets in Toll-like receptor signaling. PLoS Comput Biol 5, e1000292 \\(2009).\r\n  11. Hyduke, D.R. & Palsson, B.\u00d8. Towards genome-scale signalling-network reconstructions. Nat Rev Genet 11, 297-307 \\(2010).\r\n  12. Raman, K., Vashisht, R. & Chandra, N. Strategies for efficient disruption of metabolism in Mycobacterium tuberculosis from network analysis. Mol Biosyst 5, 1740-51 \\(2009). 13. Becker, S.A. & Palsson, B.O. Genome-scale reconstruction of the metabolic network in\r\n  Staphylococcus aureus N315: an initial draft to the two-dimensional annotation. BMC\r\n\n\nMicrobiol 5, 8 \\(2005). 14. Bordbar, A., Lewis, N.E., Schellenberger, J., Palsson, B.O. & Jamshidi, N. Insight into\r\n\n\nhuman alveolar macrophage and M. tuberculosis interactions via metabolic\r\n\n\nreconstructions. Mol Syst Biol 6, 422 \\(2010). 15. Thiele, I., Price, N.D., Vo, T.D. & Palsson, B.O. Candidate metabolic network states in\r\n\n\nhuman mitochondria. Impact of diabetes, ischemia, and diet. J Biol Chem 280, 11683-95\r\n\n\n\\(2005). 16. Price, N.D., Reed, J.L. & Palsson, B.O. Genome-scale models of microbial cells:\r\n\n\nevaluating the consequences of constraints. Nat Rev Micro 2, 886-897 \\(2004).\r\n\n\n17. Becker, S.A. et al. Quantitative prediction of cellular metabolism with constraint-based models: the COBRA Toolbox. Nat. Protocols 2, 727-738 \\(2007).\r\n  18. Notebaart, R.A., Teusink, B., Siezen, R.J. & Papp, B. Co-regulation of metabolic genes is better explained by flux coupling than by network distance. PLoS Comput Biol 4, e26 \\(2008).\r\n  19. Durot, M., Bourguignon, P.Y. & Schachter, V. Genome-scale models of bacterial metabolism: reconstruction and applications. FEMS Microbiol Rev 33, 164-90 \\(2009).\r\n  20. Raman, K., Yeturu, K. & Chandra, N. targetTB: A target identification pipeline for Mycobacterium tuberculosis through an interactome, reactome and genome-scale structural analysis. 2, 109 \\(2008).\r\n  21. Vazquez, A. et al. Impact of the solvent capacity constraint on E. coli metabolism. BMC Syst Biol 2, 7 \\(2008).\r\n  22. Henry, C.S., Jankowski, M.D., Broadbelt, L.J. & Hatzimanikatis, V. Genome-scale thermodynamic analysis of Escherichia coli metabolism. Biophys J 90, 1453-61 \\(2006).\r\n  23. Fleming, R.M., Thiele, I. & Nasheuer, H.P. Quantitative assignment of reaction directionality in constraint-based models of metabolism: application to Escherichia coli. Biophys Chem 145, 47-56 \\(2009).\r\n  24. Fleming, R.M. & Thiele, I. von Bertalanffy 1.0: a COBRA toolbox extension to thermodynamically constrain metabolic models. Bioinfomatics, In Press \\(2010).\r\n  25. Becker, S.A. & Palsson, B.O. Context-Specific Metabolic Networks Are Consistent with Experiments. PLoS Comput Biol 4, e1000082 \\(2008).\r\n  26. Shlomi, T., Cabili, M.N., Herrgard, M.J., Palsson, B.O. & Ruppin, E. Network-based prediction of human tissue-specific metabolism. Nat Biotech 26, 1003-1010 \\(2008).\r\n  27. Schellenberger, J. & Palsson, B.O. Use of randomized sampling for analysis of metabolic networks. J Biol Chem 284, 5457-61 \\(2009).\r\n  28. Orth, J.D., Thiele, I. & Palsson, B.O. What is flux balance analysis? Nat Biotech 28, 245- 248 \\(2010).\r\n  29. Orth, J.D. & Palsson, B.\u00d8. Systematizing the generation of missing metabolic knowledge. Biotechnology and Bioengineering 107, 403-412 \\(2010).\r\n  30. Palsson, B. Metabolic systems biology. FEBS Lett 583, 3900-4 \\(2009). 31. Schellenberger, J., Park, J., Conrad, T. & Palsson, B. BiGG: a Biochemical Genetic and\r\n  Genomic knowledgebase of large scale metabolic reconstructions. BMC Bioinformatics\r\n\n\n11, 213 \\(2010). 32. Palsson, B.O. Two-dimensional annotation of genomes. Nat Biotechnol 22, 1218-9\r\n\n\n\\(2004). 33. Reed, J.L., Famili, I., Thiele, I. & Palsson, B.O. Towards multidimensional genome\r\n\n\nannotation. Nat Rev Genet 7, 130-141 \\(2006). 34. Feist, A.M. et al. A genome-scale metabolic reconstruction for Escherichia coli K-12\r\n\n\nMG1655 that accounts for 1260 ORFs and thermodynamic information. Mol Syst Biol 3\r\n\n\n\\(2007). 35. Hong, S.H. et al. The genome sequence of the capnophilic rumen bacterium Mannheimia\r\n\n\nsucciniciproducens. Nat Biotech 22, 1275-1281 \\(2004). 36. Mo, M., Palsson, B. & Herrgard, M. Connecting extracellular metabolomic\r\n\n\nmeasurements to intracellular flux states in yeast. BMC Systems Biology 3, 37 \\(2009). 37. Nogales, J., Palsson, B. & Thiele, I. A genome-scale metabolic reconstruction of\r\n\n\nPseudomonas putida KT2440: iJN746 as a cell factory. BMC Systems Biology 2, 79\r\n\n\n\\(2008). 38. Raghunathan, A., Reed, J., Shin, S., Palsson, B. & Daefler, S. Constraint-based analysis of\r\n\n\nmetabolic capacity of Salmonella typhimurium during host-pathogen interaction. BMC Syst Biol 3, 38 \\(2009).\r\n\n\n39. Nookaew, I. et al. The genome-scale metabolic model iIN800 of Saccharomyces cerevisiae and its validation: a scaffold to query lipid metabolism. BMC Syst Biol 2, 71 \\(2008).\r\n  40. Kuepfer, L., Sauer, U. & Blank, L.M. Metabolic functions of duplicate genes in Saccharomyces cerevisiae. Genome Res 15, 1421-30 \\(2005).\r\n  41. Gonzalez, O. et al. Reconstruction, modeling & analysis of Halobacterium salinarum R-1 metabolism. Mol Biosyst 4, 148-59 \\(2008).\r\n  42. Heinemann, M., Kummel, A., Ruinatscha, R. & Panke, S. In silico genome-scale reconstruction and validation of the Staphylococcus aureus metabolic network. Biotechnol Bioeng 92, 850-64 \\(2005).\r\n  43. Thiele, I. & Palsson, B.O. A protocol for generating a high-quality genome-scale metabolic reconstruction. Nat. Protocols 5, 93-121 \\(2010).\r\n  44. Smallbone, K. & Simeonidis, E. Flux balance analysis: A geometric perspective. Journal of Theoretical Biology 258, 311-315 \\(2009).\r\n  45. Satish Kumar, V., Dasika, M. & Maranas, C. Optimization based automated curation of metabolic reconstructions. BMC Bioinformatics 8, 212 \\(2007).\r\n  46. Burgard, A.P., Pharkya, P. & Maranas, C.D. Optknock: A bilevel programming framework for identifying gene knockout strategies for microbial strain optimization. Biotechnology and Bioengineering 84, 647-657 \\(2003).\r\n  47. Patil, K., Rocha, I., Forster, J. & Nielsen, J. Evolutionary programming as a platform for in silico metabolic engineering. BMC Bioinformatics 6, 308 \\(2005).\r\n  48. Lun, D.S. et al. Large-scale identification of genetic design strategies using local search. Mol Syst Biol 5 \\(2009).\r\n  49. Schellenberger, J., Lewis, N.E. & Palsson, B.\u00d8. Elimination of thermodynamically infeasible loops in steady-state metabolic models. Biophysical J 200, 544-53 \\(2011). 50. Price, N.D., Schellenberger, J. & Palsson, B.O. Uniform sampling of steady-state flux\r\n  spaces: means to design experiments and to interpret enzymopathies. Biophys J 87,\r\n\n\n2172-86 \\(2004). 51. Wiback, S.J., Famili, I., Greenberg, H.J. & Palsson, B.O. Monte Carlo sampling can be\r\n\n\nused to determine the size and shape of the steady-state flux space. J Theor Biol 228,\r\n\n\n437-47 \\(2004). 52. Almaas, E., Kovacs, B., Vicsek, T., Oltvai, Z.N. & Barabasi, A.L. Global organization of\r\n\n\nmetabolic fluxes in the bacterium Escherichia coli. Nature 427, 839-43 \\(2004). 53. Reed, J.L. et al. Systems approach to refining genome annotation. Proceedings of the\r\n\n\nNational Academy of Sciences 103, 17480-17484 \\(2006). 54. Chandrasekaran, S. & Price, N.D. Probabilistic integrative modeling of genome-scale\r\n\n\nmetabolic and regulatory networks in Escherichia coli and Mycobacterium tuberculosis.\r\n\n\nProc Natl Acad Sci U S A 107, 17845-50 \\(2010). 55. Henry, C.S. et al. High-throughput generation, optimization and analysis of genome-\r\n\n\nscale metabolic models. Nat Biotechnol 28, 977-82 \\(2010). 56. Hucka, M. et al. The systems biology markup language \\(SBML): a medium for\r\n\n\nrepresentation and exchange of biochemical network models. Bioinformatics 19, 524-\r\n\n\n531 \\(2003). 57. Bornstein, B.J., Keating, S.M., Jouraku, A. & Hucka, M. LibSBML: an API Library for\r\n\n\nSBML. Bioinformatics 24, 880-881 \\(2008). 58. Keating, S.M., Bornstein, B.J., Finney, A. & Hucka, M. SBMLToolbox: an SBML toolbox\r\n\n\nfor MATLAB users. Bioinformatics 22, 1275-1277 \\(2006). 59. Feist, A.M. & Palsson, B.O. The biomass objective function. Current Opinion in\r\n\n\nMicrobiology 13, 344-349 \\(2010).\r\n\n\n60. Varma, A. & Palsson, B.O. Metabolic capabilities of Escherichia coli: I. Synthesis of biosynthetic precursors and cofactors. Journal of Theoretical Biology 165, 477-502 \\(1993).\r\n  61. Lewis, N.E. et al. Omic data from evolved E. coli are consistent with computed optimal growth from genome-scale models. Mol Syst Biol 6, 390 \\(2010).\r\n  62. Segr\u00e8, D., Vitkup, D. & Church, G.M. Analysis of optimality in natural and perturbed metabolic networks. Proceedings of the National Academy of Sciences of the United States of America 99, 15112-15117 \\(2002).\r\n  63. Mahadevan, R. & Schilling, C.H. The effects of alternate optimal solutions in constraint- based genome-scale metabolic models. Metabolic Engineering 5, 264-276 \\(2003).\r\n  64. Fischer, E., Zamboni, N. & Sauer, U. High-throughput metabolic flux analysis based on gas chromatography-mass spectrometry derived 13C constraints. Analytical Biochemistry 325, 308-316 \\(2004).\r\n  65. Wiechert, W., M\u00f6llney, M., Isermann, N., Wurzel, M. & de Graaf, A.A. Bidirectional reaction steps in metabolic networks: III. Explicit solution and analysis of isotopomer labeling systems. Biotechnology and Bioengineering 66, 69-85 \\(1999).\r\n  66. Antoniewicz, M.R., Kelleher, J.K. & Stephanopoulos, G. Elementary metabolite units \\(EMU): A novel framework for modeling isotopic distributions. Metabolic Engineering 9, 68-86 \\(2007).\r\n  67. Kanehisa, M. & Goto, S. KEGG: kyoto encyclopedia of genes and genomes. Nucleic Acids Res 28, 27-30 \\(2000).\r\n  68. Kanehisa, M., Goto, S., Kawashima, S., Okuno, Y. & Hattori, M. The KEGG resource for deciphering the genome. Nucleic Acids Res 32, D277-80 \\(2004).\r\n  69. Waygood, E.B. & Sanwal, B.D. The control of pyruvate kinases of Escherichia coli. I. Physicochemical and regulatory properties of the enzyme activated by fructose 1,6- diphosphate. J Biol Chem 249, 265-74 \\(1974).\r\n  70. Duarte, N.C. et al. Global reconstruction of the human metabolic network based on genomic and bibliomic data. Proc Natl Acad Sci U S A 104, 1777-82 \\(2007).\r\n  71. Kazeros, A. et al. Overexpression of apoptotic cell removal receptor MERTK in alveolar macrophages of cigarette smokers. Am J Respir Cell Mol Biol 39, 747-57 \\(2008)."
        },
        {
            "header": "Acknowledgements",
            "content": "We would like to thank individuals who have contributed to or tested COBRA 2.0 \u2013 Steinn Gudmundsson, Tom Conrad, Neema Jamshidi, Richard Notebaart, and Jake Feala.\r\n\n\n\r\n\n\nFunding was provided in part by the <a href=http://www.sysbep.org>National Institute of Allergy and Infectious Diseases NIH/DHHS through interagency agreement Y1-AI-8401-01</a>, NIH grants : GM68837-05A1, DE-PS02-08ER08-01, GM057089-12, and GM057089-11S1, and the CalIT2 Summer scholars program. RF and IT were funded by U.S. Department of Energy, Offices of Advanced Scientific Computing Research and the Biological and Environmental Research as part of the Scientific Discovery Through Advanced Computing program, grant DE-SC0002009."
        }
    ],
    "attributes": {
        "acceptedTermsAndConditions": true,
        "allowDirectSubmit": true,
        "archivedVersions": [],
        "articleType": "Method Article",
        "associatedPublications": [
            {
                "doi": "10.1038/nprot.2007.99",
                "date": "2011-05-11 10:27:34",
                "title": "Quantitative prediction of cellular metabolism with constraint-based models: the COBRA Toolbox",
                "authors": [
                    "Scott A Becker",
                    "Adam M Feist",
                    "Monica L Mo",
                    "Gregory Hannum",
                    "Bernhard \u00d8 Palsson",
                    "and Markus J Herrgard"
                ],
                "journal": "Nature Protocols",
                "logo": ""
            },
            {
                "doi": "10.1038/nprot.2011.308",
                "date": "2011-09-15 10:05:12",
                "title": "Quantitative prediction of cellular metabolism with constraint-based models: the COBRA Toolbox v2.0",
                "authors": [
                    "Jan Schellenberger",
                    "Richard Que",
                    "Ronan M T Fleming",
                    "Ines Thiele",
                    "Jeffrey D Orth",
                    "Adam M Feist",
                    "Daniel C Zielinski",
                    "Aarash Bordbar",
                    "Nathan E Lewis",
                    "Sorena Rahmanian",
                    "Joseph Kang",
                    "Daniel R Hyduke",
                    "and Bernhard \u00d8 Palsson"
                ],
                "journal": "Nature Protocols",
                "logo": ""
            }
        ],
        "authors": [
            {
                "id": 11749,
                "identity": "9fa0ce53-516f-11e9-9e20-12b504df345a",
                "order_by": 0,
                "name": "Daniel Hyduke",
                "email": "danielhyduke@gmail.com",
                "orcid": "",
                "institution": "Center for Systems Biology for Enteropathogens",
                "correspondingAuthor": true,
                "prefix": "",
                "firstName": "Daniel",
                "middleName": "",
                "lastName": "Hyduke",
                "suffix": ""
            },
            {
                "id": 11750,
                "identity": "9fa0d15b-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Jan  Schellenberger",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Jan",
                "middleName": "",
                "lastName": "Schellenberger",
                "suffix": ""
            },
            {
                "id": 11751,
                "identity": "9fa0d32d-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Richard Que",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Richard",
                "middleName": "",
                "lastName": "Que",
                "suffix": ""
            },
            {
                "id": 11752,
                "identity": "9fa0d61d-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Ronan Fleming",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Ronan",
                "middleName": "",
                "lastName": "Fleming",
                "suffix": ""
            },
            {
                "id": 11753,
                "identity": "9fa0d7c0-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Ines Thiele",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Ines",
                "middleName": "",
                "lastName": "Thiele",
                "suffix": ""
            },
            {
                "id": 11754,
                "identity": "9fa0d921-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Jeffery Orth",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Jeffery",
                "middleName": "",
                "lastName": "Orth",
                "suffix": ""
            },
            {
                "id": 11755,
                "identity": "9fa0da83-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Adam Feist",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Adam",
                "middleName": "",
                "lastName": "Feist",
                "suffix": ""
            },
            {
                "id": 11756,
                "identity": "9fa0dbdf-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Daniel Zielinski",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Daniel",
                "middleName": "",
                "lastName": "Zielinski",
                "suffix": ""
            },
            {
                "id": 11757,
                "identity": "9fa0dd64-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Aarash Bordbar",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Aarash",
                "middleName": "",
                "lastName": "Bordbar",
                "suffix": ""
            },
            {
                "id": 11758,
                "identity": "9fa0dec4-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Nathan Lewis",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Nathan",
                "middleName": "",
                "lastName": "Lewis",
                "suffix": ""
            },
            {
                "id": 11759,
                "identity": "9fa0e01d-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Sorena Rahmanian",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Sorena",
                "middleName": "",
                "lastName": "Rahmanian",
                "suffix": ""
            },
            {
                "id": 11760,
                "identity": "9fa0f059-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Joseph Kang",
                "email": "",
                "orcid": "",
                "institution": "",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Joseph",
                "middleName": "",
                "lastName": "Kang",
                "suffix": ""
            },
            {
                "id": 11761,
                "identity": "9fa0f3a9-516f-11e9-9e20-12b504df345a",
                "order_by": 1,
                "name": "Bernhard Palsson",
                "email": "",
                "orcid": "",
                "institution": "University of California, San Diego",
                "correspondingAuthor": false,
                "prefix": "",
                "firstName": "Bernhard",
                "middleName": "",
                "lastName": "Palsson",
                "suffix": ""
            }
        ],
        "badges": [],
        "createdAt": "2011-05-10 19:36:20",
        "currentVersionCode": 1,
        "declarations": "",
        "doi": "10.1038/protex.2011.234",
        "doiUrl": "https://doi.org/10.1038/protex.2011.234",
        "draftVersion": [],
        "editorialEvents": [],
        "editorialNote": "",
        "failedWorkflow": [],
        "files": [
            {
                "id": 2608277,
                "identity": "93c1d4f5-6701-4667-99b4-73bf991a9284",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 1,
                "title": "Figure 1",
                "display": "",
                "copyAsset": false,
                "role": "figure",
                "size": 526573,
                "visible": true,
                "origin": "",
                "legend": "The philosophy of COnstraints-Based Reconstruction and Analysis.   (a) COnstraints-Based Reconstruction and Analysis (COBRA) of biological networks involves the creation of network models from a variety of biological data sources. The capabilities of the model are then assessed in the context of physical, chemical, regulatory, and omics constraints (Reproduced from Becker et al.17 with permission). (b) COBRA models are often derived from BiGG knowledgebases which are essentially 2-D annotations of the genome that relate metabolic activity to genomic loci. (left inset) In Escherichia coli, the glyceraldehyde-3-phosphate dehydrogenase (GAPD) activity can be provided by two isozymes (GapA or GapC); GapC is a heteromeric protein that requires genes from two genomic loci. The contents of a BiGG knowledgebase can be converted to a map (right) to facilitate visual interpretation. Or a mathematical modeling formalism to develop and explore hypotheses, such as a stoichiometric matrix (bottom) that can be used to explore mass flow through the network. (Modified reproduction from Reed et al.33 with permission).",
                "description": "",
                "filename": "figure1.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/figure_1.pdf"
            },
            {
                "id": 2608284,
                "identity": "43a14191-c5d2-4c45-842c-88cd86bbc9ed",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 2,
                "title": "Figure 2",
                "display": "",
                "copyAsset": false,
                "role": "figure",
                "size": 354123,
                "visible": true,
                "origin": "",
                "legend": "Overview of the COBRA toolbox.   (a) Seven categories of COBRA methods contained within version 2.0 of the COBRA Toolbox. (b) The COBRA Toolbox contains solver interface functions for linear, quadratic, mixed integer linear and quadratic, and nonlinear programming problems. Functions to read and write models in several formats are available. A test suite is included to validate installation as well as provide example implementation of many methods.",
                "description": "",
                "filename": "figure2.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/figure_2.pdf"
            },
            {
                "id": 2608278,
                "identity": "8fa3a339-f6ad-4d3d-886f-c9f3acacfde4",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 3,
                "title": "Figure 3",
                "display": "",
                "copyAsset": false,
                "role": "figure",
                "size": 940233,
                "visible": true,
                "origin": "",
                "legend": "Flux balance analysis of E. coli core model   (left) Full E. coli core map. (right) Zoom in on the optimal flux distribution map of the citric acid cycle. (bottom) Zoom in on the flux color scale. Reactions are colored according to a scale of cyan (flux of 15 mmol\u00b7gDW-1\u00b7 h-1 or greater in the reverse direction) to magenta (flux of 15 mmol\u00b7gDW-1\u00b7 h-1 or greater in the forward direction). Reactions carrying zero flux have their corresponding arrows narrowed.",
                "description": "",
                "filename": "figure3.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/figure_3.pdf"
            },
            {
                "id": 2608279,
                "identity": "55dcde8a-3a27-45f0-aff0-345802c954aa",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 4,
                "title": "Figure 4",
                "display": "",
                "copyAsset": false,
                "role": "figure",
                "size": 1037143,
                "visible": true,
                "origin": "",
                "legend": "Flux variability analysis of E. coli.   (right) Reaction map of E. coli core model. (left) Flux variability analysis of part of glycolysis\r\nand pentose phosphate pathway in the E. coli core model when growth rate is constrained to 90% of optimal. Bi-directional reversible reactions are colored green. Unidirectional reversible reactions which carry flux in the forward direction are colored magenta. Unidirectional reversible reactions which carry flux only in the reverse direction are colored cyan. Irreversible fluxes are colored blue. Unidirectional fluxes have enlarged arrowheads in the direction of the flux.",
                "description": "",
                "filename": "figure4.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/figure_4.pdf"
            },
            {
                "id": 2608280,
                "identity": "2dea673c-0c3e-40e3-ae79-f2a3410b1e00",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 5,
                "title": "Figure 5",
                "display": "",
                "copyAsset": false,
                "role": "figure",
                "size": 330053,
                "visible": true,
                "origin": "",
                "legend": "Sampling histogram of glycolysis using the E. coli core model under aerobic and anaerobic glucose minimal media conditionsSampling histogram of glycolysis using the E. coli core model under aerobic and anaerobic glucose minimal media conditions   For growth in aerobic (\u2013) vs. anaerobic (\u2013) medium, there is a large shift in the probable flux through many of the reactionsIn general, the range of flux probabilities for each reaction became more constrained. Phosphoglucose Isomerase (PGI) switched from being able to carry flux in either direction with aerobic conditions to only carrying flux in the forward direction with anaerobic conditions.",
                "description": "",
                "filename": "figure5.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/figure_5.pdf"
            },
            {
                "id": 13465124,
                "identity": "17e93df9-60eb-40cc-bc05-87facccfa13d",
                "added_by": "auto",
                "created_at": "2021-09-16 20:45:45",
                "extension": "pdf",
                "order_by": 0,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "manuscript-pdf",
                "size": 737965,
                "visible": true,
                "origin": "",
                "legend": "",
                "description": "",
                "filename": "manuscript.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/8d55a9f5-9b9b-495d-8893-ab2fff00da2d.pdf"
            },
            {
                "id": 2608286,
                "identity": "6f3a91c6-ec18-435e-965b-43dc9507f3eb",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:06",
                "extension": "pdf",
                "order_by": 0,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 623484,
                "visible": true,
                "origin": "",
                "legend": "Supplementary Material   All Supplementary Material (S1-S5)",
                "description": "",
                "filename": "supplement0.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/supplement_0.pdf"
            },
            {
                "id": 2608281,
                "identity": "6d976db2-906e-4368-891f-ac38f47b5fd5",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 0,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 69403,
                "visible": true,
                "origin": "",
                "legend": "Table 2.   Troubleshooting \u00a0Table ",
                "description": "",
                "filename": "supplement0.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/supplement_0.pdf"
            },
            {
                "id": 2608282,
                "identity": "ffd0844d-3b35-46f6-91b3-c46335ae8fda",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 0,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 71140,
                "visible": true,
                "origin": "",
                "legend": "Table 1.   Features of the COBRA Toolbox 1.0 and 2.0",
                "description": "",
                "filename": "supplement0.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/supplement_0.pdf"
            },
            {
                "id": 2608283,
                "identity": "d957e7ba-dc38-44ec-9ba3-3b060430ac06",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 0,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 73749,
                "visible": true,
                "origin": "",
                "legend": "Table 3.   growthExpMatch \u00a0gap \u00a0filling \u00a0solutions ",
                "description": "",
                "filename": "supplement0.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/supplement_0.pdf"
            },
            {
                "id": 2608285,
                "identity": "340311e9-7759-4384-bbb8-88ad375cb328",
                "added_by": "29b0f50f-991e-4cf6-96fc-2c41c75f34f2",
                "created_at": "2020-09-25 20:50:05",
                "extension": "pdf",
                "order_by": 0,
                "title": "",
                "display": "",
                "copyAsset": false,
                "role": "supplement",
                "size": 57813,
                "visible": true,
                "origin": "",
                "legend": "Table 4.   Expected \u00a0results \u00a0from \u00a0OptKnock \u00a0and \u00a0GDLS \u00a0optimizations \u00a0for \u00a0 lactate, \u00a0succinate \u00a0and \u00a0pyruvate \u00a0production \u00a0growing \u00a0on \u00a0glucose ",
                "description": "",
                "filename": "supplement0.pdf",
                "url": "https://assets.researchsquare.com/files/nprot-2097/v1/supplement_0.pdf"
            }
        ],
        "financialInterests": "Bernhard \u00d8. Palsson serves on the scientific advisory board of Genomatica, Inc.",
        "fulltextSource": "",
        "fullText": "",
        "funders": [],
        "hasOptedInToPreprint": true,
        "hasPassedJournalQc": "",
        "hideJournal": true,
        "highlight": "",
        "institution": "",
        "isAuthorSuppliedPdf": false,
        "isDeskRejected": "",
        "isHiddenFromSearch": false,
        "isInQc": false,
        "isInWorkflow": false,
        "journal": {
            "display": true,
            "email": "protocol.exchange@nature.com",
            "identity": "protocol-exchange",
            "isNatureJournal": false,
            "hasQc": false,
            "allowDirectSubmit": true,
            "externalIdentity": "",
            "sideBox": "",
            "submissionUrl": "https://protocolexchange.researchsquare.com/submission",
            "title": "Protocol Exchange",
            "twitterHandle": ""
        },
        "keywords": "constraint based modeling, network reconstruction, metabolism, systems biology, metabolic engineering",
        "license": {
            "name": "CC BY-NC 3.0",
            "url": "https://creativecommons.org/licenses/by-nc/3.0/"
        },
        "manuscriptAbstract": "Over the past decade, a growing community of researchers has emerged around the use of COnstraint-Based Reconstruction and Analysis \\(COBRA) methods to simulate, analyze and predict a variety of metabolic phenotypes using genome-scale models. The COBRA Toolbox, a MATLAB package for implementing COBRA methods, was presented earlier. Here we present a significant update of this in silico ToolBox. Version 2.0 of the COBRA Toolbox expands the scope of computations by including in silico analysis methods developed since its original release.  New functions include: \\(1) network gap filling, \\(2) <sup>13</sup>C analysis, \\(3) metabolic engineering, \\(4) omics-guided analysis, and \\(5) visualization.  As with the first version, the COBRA Toolbox reads and writes Systems Biology Markup Language formatted models.  In version 2.0, we improved performance, usability, and the level of documentation.  A suite of test scripts can now be used to learn the core functionality of the Toolbox and validate results. This Toolbox lowers the barrier of entry to use powerful COBRA methods.",
        "manuscriptTitle": "COBRA Toolbox 2.0",
        "msid": "",
        "msnumber": "",
        "nonDraftVersions": [
            {
                "code": 1,
                "date": "2011-05-11 10:34:32",
                "doi": "10.1038/protex.2011.234",
                "editorialEvents": [
                    {
                        "type": "communityComments",
                        "content": 4
                    }
                ],
                "status": "published",
                "journal": {
                    "display": true,
                    "email": "info@researchsquare.com",
                    "identity": "researchsquare",
                    "isNatureJournal": false,
                    "hasQc": true,
                    "allowDirectSubmit": true,
                    "externalIdentity": "",
                    "sideBox": "",
                    "submissionUrl": "/submission",
                    "title": "Research Square",
                    "twitterHandle": "researchsquare"
                }
            }
        ],
        "origin": "",
        "ownerIdentity": "9fa07016-516f-11e9-9e20-12b504df345a",
        "owner": [],
        "postedDate": "May 11th, 2011",
        "published": true,
        "revision": "",
        "status": "posted",
        "subjectAreas": [
            {
                "id": 2564,
                "name": "Computational biology and bioinformatics"
            },
            {
                "id": 2565,
                "name": "Microbiology"
            }
        ],
        "tags": [],
        "versionOfRecord": [],
        "versionCreatedAt": "2011-05-11 10:34:32",
        "video": "",
        "vorDoi": "",
        "vorDoiUrl": "",
        "workflowStages": []
    }
}